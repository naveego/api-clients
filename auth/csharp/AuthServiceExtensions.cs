// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Naveego.Auth
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AuthService.
    /// </summary>
    public static partial class AuthServiceExtensions
    {
            /// <summary>
            /// get the configuration for a tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant id
            /// </param>
            public static TenantConfiguration GetConfiguration(this IAuthService operations, string tenantId)
            {
                return operations.GetConfigurationAsync(tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// get the configuration for a tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TenantConfiguration> GetConfigurationAsync(this IAuthService operations, string tenantId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationWithHttpMessagesAsync(tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get jwks for key validation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static DiscoveryKeys DiscoverKeys(this IAuthService operations)
            {
                return operations.DiscoverKeysAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get jwks for key validation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiscoveryKeys> DiscoverKeysAsync(this IAuthService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscoverKeysWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Oauth2 authorize endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Authorize(this IAuthService operations)
            {
                operations.AuthorizeAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Oauth2 authorize endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AuthorizeAsync(this IAuthService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AuthorizeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Oauth2 token endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='grantType'>
            /// The grant_type to use for obtaining a token
            /// </param>
            /// <param name='username'>
            /// The username used with grant_type=password
            /// </param>
            /// <param name='password'>
            /// The password used with grant_type=password
            /// </param>
            /// <param name='code'>
            /// The code to use with grant_type=authorization_code
            /// </param>
            /// <param name='refreshToken'>
            /// The refresh token to use with grant_type=refresh_token
            /// </param>
            public static OauthToken Token(this IAuthService operations, string grantType, string username = default(string), string password = default(string), string code = default(string), string refreshToken = default(string))
            {
                return operations.TokenAsync(grantType, username, password, code, refreshToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Oauth2 token endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='grantType'>
            /// The grant_type to use for obtaining a token
            /// </param>
            /// <param name='username'>
            /// The username used with grant_type=password
            /// </param>
            /// <param name='password'>
            /// The password used with grant_type=password
            /// </param>
            /// <param name='code'>
            /// The code to use with grant_type=authorization_code
            /// </param>
            /// <param name='refreshToken'>
            /// The refresh token to use with grant_type=refresh_token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OauthToken> TokenAsync(this IAuthService operations, string grantType, string username = default(string), string password = default(string), string code = default(string), string refreshToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TokenWithHttpMessagesAsync(grantType, username, password, code, refreshToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Redirects user back to target login endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// The tenant id for this request
            /// </param>
            /// <param name='sAMLResponse'>
            /// The SAML AuthNResponse from the Identity Provider
            /// </param>
            /// <param name='relayState'>
            /// The relay state obtained from generate request process
            /// </param>
            public static void GenerateRequest(this IAuthService operations, string tid, string sAMLResponse, string relayState)
            {
                operations.GenerateRequestAsync(tid, sAMLResponse, relayState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Redirects user back to target login endpoint
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// The tenant id for this request
            /// </param>
            /// <param name='sAMLResponse'>
            /// The SAML AuthNResponse from the Identity Provider
            /// </param>
            /// <param name='relayState'>
            /// The relay state obtained from generate request process
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GenerateRequestAsync(this IAuthService operations, string tid, string sAMLResponse, string relayState, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GenerateRequestWithHttpMessagesAsync(tid, sAMLResponse, relayState, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Generates a SAML request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// The tenant id for this request
            /// </param>
            /// <param name='clientId'>
            /// The Oauth2 client_id that is making the reqeust
            /// </param>
            public static SamlGenerateRequestResponse GenerateRequest1(this IAuthService operations, string tid, string clientId)
            {
                return operations.GenerateRequest1Async(tid, clientId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates a SAML request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// The tenant id for this request
            /// </param>
            /// <param name='clientId'>
            /// The Oauth2 client_id that is making the reqeust
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SamlGenerateRequestResponse> GenerateRequest1Async(this IAuthService operations, string tid, string clientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateRequest1WithHttpMessagesAsync(tid, clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the SAML settings for this tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// The tenant id for this request
            /// </param>
            public static SamlSAMLSettings GetSAMLSettings(this IAuthService operations, string tid)
            {
                return operations.GetSAMLSettingsAsync(tid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the SAML settings for this tenant
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// The tenant id for this request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SamlSAMLSettings> GetSAMLSettingsAsync(this IAuthService operations, string tid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSAMLSettingsWithHttpMessagesAsync(tid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static UserUser Create(this IAuthService operations, UserCreateUser body)
            {
                return operations.CreateAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserUser> CreateAsync(this IAuthService operations, UserCreateUser body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// identifier of the user
            /// </param>
            public static UserUser Get(this IAuthService operations, string userId)
            {
                return operations.GetAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// identifier of the user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserUser> GetAsync(this IAuthService operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// identifier of the user
            /// </param>
            /// <param name='body'>
            /// </param>
            public static UserUser Update(this IAuthService operations, string userId, UserUser body)
            {
                return operations.UpdateAsync(userId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// identifier of the user
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserUser> UpdateAsync(this IAuthService operations, string userId, UserUser body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(userId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// identifier of the user
            /// </param>
            public static void Update1(this IAuthService operations, string userId)
            {
                operations.Update1Async(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// identifier of the user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Update1Async(this IAuthService operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Update1WithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an auth code for the user to use for logging in.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// identifier of the user
            /// </param>
            public static UserAuthCodeResponse GenerateAuthCode(this IAuthService operations, string userId)
            {
                return operations.GenerateAuthCodeAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an auth code for the user to use for logging in.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// identifier of the user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserAuthCodeResponse> GenerateAuthCodeAsync(this IAuthService operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateAuthCodeWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
