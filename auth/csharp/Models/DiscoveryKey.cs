// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Naveego.Auth.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DiscoveryKey
    {
        /// <summary>
        /// Initializes a new instance of the DiscoveryKey class.
        /// </summary>
        public DiscoveryKey()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiscoveryKey class.
        /// </summary>
        public DiscoveryKey(string alg, string e, string kid, string kty, string n, string use, IList<string> x5c, string x5t)
        {
            Alg = alg;
            E = e;
            Kid = kid;
            Kty = kty;
            N = n;
            Use = use;
            X5c = x5c;
            X5t = x5t;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "alg")]
        public string Alg { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "e")]
        public string E { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "kid")]
        public string Kid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "kty")]
        public string Kty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "n")]
        public string N { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "use")]
        public string Use { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "x5c")]
        public IList<string> X5c { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "x5t")]
        public string X5t { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Alg == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Alg");
            }
            if (E == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "E");
            }
            if (Kid == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Kid");
            }
            if (Kty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Kty");
            }
            if (N == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "N");
            }
            if (Use == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Use");
            }
            if (X5c == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "X5c");
            }
            if (X5t == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "X5t");
            }
        }
    }
}
