// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Naveego.Auth.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class SamlSAMLSettings
    {
        /// <summary>
        /// Initializes a new instance of the SamlSAMLSettings class.
        /// </summary>
        public SamlSAMLSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SamlSAMLSettings class.
        /// </summary>
        public SamlSAMLSettings(string assertionConsumerServiceUrl, string id, string idpPublicCertPath, string idpSsoDecriptorUrl, string idpSsoUrl)
        {
            AssertionConsumerServiceUrl = assertionConsumerServiceUrl;
            Id = id;
            IdpPublicCertPath = idpPublicCertPath;
            IdpSsoDecriptorUrl = idpSsoDecriptorUrl;
            IdpSsoUrl = idpSsoUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assertion_consumer_service_url")]
        public string AssertionConsumerServiceUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idp_public_cert_path")]
        public string IdpPublicCertPath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idp_sso_decriptor_url")]
        public string IdpSsoDecriptorUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "idp_sso_url")]
        public string IdpSsoUrl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AssertionConsumerServiceUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AssertionConsumerServiceUrl");
            }
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (IdpPublicCertPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IdpPublicCertPath");
            }
            if (IdpSsoDecriptorUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IdpSsoDecriptorUrl");
            }
            if (IdpSsoUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IdpSsoUrl");
            }
        }
    }
}
