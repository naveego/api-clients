"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = require("ms-rest-js");
const Models = require("./models");
exports.AuthModels = Models;
const Mappers = require("./models/mappers");
exports.AuthMappers = Mappers;
const Parameters = require("./models/parameters");
const authContext_1 = require("./authContext");
class Auth extends authContext_1.AuthContext {
    /**
     * @class
     * Initializes a new instance of the Auth class.
     * @constructor
     *
     * @param {string} [baseUri] - The base URI of the service.
     *
     * @param {object} [options] - The parameter options
     *
     * @param {Array} [options.filters] - Filters to be added to the request pipeline
     *
     * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
     * {@link https://github.github.io/fetch/#Request Options doc}
     *
     * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
     *
     */
    constructor(credentials, baseUri, options) {
        super(credentials, baseUri, options);
    }
    // methods on the client.
    /**
     * @summary get the configuration for a tenant
     *
     * @param {string} tenantId The tenant id
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    getConfigurationWithHttpOperationResponse(tenantId, options) {
        return this.sendOperationRequest({
            tenantId,
            options
        }, getConfigurationOperationSpec);
    }
    // methods on the client.
    /**
     * @summary get jwks for key validation
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    discoverKeysWithHttpOperationResponse(options) {
        return this.sendOperationRequest({
            options
        }, discoverKeysOperationSpec);
    }
    // methods on the client.
    /**
     * @summary Oauth2 authorize endpoint
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    authorizeWithHttpOperationResponse(options) {
        return this.sendOperationRequest({
            options
        }, authorizeOperationSpec);
    }
    // methods on the client.
    /**
     * @summary Oauth2 token endpoint
     *
     * @param {string} grantType The grant_type to use for obtaining a token
     *
     * @param {AuthTokenOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    tokenWithHttpOperationResponse(grantType, options) {
        return this.sendOperationRequest({
            grantType,
            options
        }, tokenOperationSpec);
    }
    // methods on the client.
    /**
     * @summary Redirects user back to target login endpoint
     *
     * @param {string} tid The tenant id for this request
     *
     * @param {string} sAMLResponse The SAML AuthNResponse from the Identity Provider
     *
     * @param {string} relayState The relay state obtained from generate request process
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    generateRequestWithHttpOperationResponse(tid, sAMLResponse, relayState, options) {
        return this.sendOperationRequest({
            tid,
            sAMLResponse,
            relayState,
            options
        }, generateRequestOperationSpec);
    }
    // methods on the client.
    /**
     * @summary Generates a SAML request
     *
     * @param {string} tid The tenant id for this request
     *
     * @param {string} clientId The Oauth2 client_id that is making the reqeust
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    generateRequest1WithHttpOperationResponse(tid, clientId, options) {
        return this.sendOperationRequest({
            tid,
            clientId,
            options
        }, generateRequest1OperationSpec);
    }
    // methods on the client.
    /**
     * @summary Gets the SAML settings for this tenant
     *
     * @param {string} tid The tenant id for this request
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    getSAMLSettingsWithHttpOperationResponse(tid, options) {
        return this.sendOperationRequest({
            tid,
            options
        }, getSAMLSettingsOperationSpec);
    }
    // methods on the client.
    /**
     * @summary Create a user.
     *
     * @param {UserCreateUser} body
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    createWithHttpOperationResponse(body, options) {
        return this.sendOperationRequest({
            body,
            options
        }, createOperationSpec);
    }
    // methods on the client.
    /**
     * @summary Gets a user.
     *
     * @param {string} userId identifier of the user
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    getWithHttpOperationResponse(userId, options) {
        return this.sendOperationRequest({
            userId,
            options
        }, getOperationSpec);
    }
    // methods on the client.
    /**
     * @summary Updates a user.
     *
     * @param {string} userId identifier of the user
     *
     * @param {UserUser} body
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    updateWithHttpOperationResponse(userId, body, options) {
        return this.sendOperationRequest({
            userId,
            body,
            options
        }, updateOperationSpec);
    }
    // methods on the client.
    /**
     * @summary Updates a user.
     *
     * @param {string} userId identifier of the user
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    update1WithHttpOperationResponse(userId, options) {
        return this.sendOperationRequest({
            userId,
            options
        }, update1OperationSpec);
    }
    // methods on the client.
    /**
     * @summary Gets an auth code for the user to use for logging in.
     *
     * @param {string} userId identifier of the user
     *
     * @param {RequestOptionsBase} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} The deserialized result object.
     *
     * @reject {Error|ServiceError} The error object.
     */
    generateAuthCodeWithHttpOperationResponse(userId, options) {
        return this.sendOperationRequest({
            userId,
            options
        }, generateAuthCodeOperationSpec);
    }
    getConfiguration(tenantId, options, callback) {
        return msRest.responseToBody(this.getConfigurationWithHttpOperationResponse.bind(this), tenantId, options, callback);
    }
    discoverKeys(options, callback) {
        return msRest.responseToBody(this.discoverKeysWithHttpOperationResponse.bind(this), options, callback);
    }
    authorize(options, callback) {
        return msRest.responseToBody(this.authorizeWithHttpOperationResponse.bind(this), options, callback);
    }
    token(grantType, options, callback) {
        return msRest.responseToBody(this.tokenWithHttpOperationResponse.bind(this), grantType, options, callback);
    }
    generateRequest(tid, sAMLResponse, relayState, options, callback) {
        return msRest.responseToBody(this.generateRequestWithHttpOperationResponse.bind(this), tid, sAMLResponse, relayState, options, callback);
    }
    generateRequest1(tid, clientId, options, callback) {
        return msRest.responseToBody(this.generateRequest1WithHttpOperationResponse.bind(this), tid, clientId, options, callback);
    }
    getSAMLSettings(tid, options, callback) {
        return msRest.responseToBody(this.getSAMLSettingsWithHttpOperationResponse.bind(this), tid, options, callback);
    }
    create(body, options, callback) {
        return msRest.responseToBody(this.createWithHttpOperationResponse.bind(this), body, options, callback);
    }
    get(userId, options, callback) {
        return msRest.responseToBody(this.getWithHttpOperationResponse.bind(this), userId, options, callback);
    }
    update(userId, body, options, callback) {
        return msRest.responseToBody(this.updateWithHttpOperationResponse.bind(this), userId, body, options, callback);
    }
    update1(userId, options, callback) {
        return msRest.responseToBody(this.update1WithHttpOperationResponse.bind(this), userId, options, callback);
    }
    generateAuthCode(userId, options, callback) {
        return msRest.responseToBody(this.generateAuthCodeWithHttpOperationResponse.bind(this), userId, options, callback);
    }
}
exports.Auth = Auth;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getConfigurationOperationSpec = {
    httpMethod: "GET",
    path: "configuration/{tenantId}",
    urlParameters: [
        Parameters.tenantId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TenantConfiguration
        },
        default: {
            bodyMapper: Mappers.TenantConfiguration
        }
    },
    serializer
};
const discoverKeysOperationSpec = {
    httpMethod: "GET",
    path: "discovery/keys",
    responses: {
        200: {
            bodyMapper: Mappers.DiscoveryKeys
        },
        default: {
            bodyMapper: Mappers.DiscoveryKeys
        }
    },
    serializer
};
const authorizeOperationSpec = {
    httpMethod: "GET",
    path: "oauth2/authorize",
    responses: {
        302: {},
        default: {}
    },
    serializer
};
const tokenOperationSpec = {
    httpMethod: "POST",
    path: "oauth2/token",
    formDataParameters: [
        Parameters.grantType,
        Parameters.username,
        Parameters.password,
        Parameters.code,
        Parameters.refreshToken
    ],
    contentType: "application/x-www-form-urlencoded",
    responses: {
        200: {
            bodyMapper: Mappers.OauthToken
        },
        400: {},
        403: {},
        500: {},
        default: {
            bodyMapper: Mappers.OauthToken
        }
    },
    serializer
};
const generateRequestOperationSpec = {
    httpMethod: "POST",
    path: "saml/access",
    queryParameters: [
        Parameters.tid
    ],
    formDataParameters: [
        Parameters.sAMLResponse,
        Parameters.relayState
    ],
    contentType: "application/x-www-form-urlencoded",
    responses: {
        302: {},
        default: {}
    },
    serializer
};
const generateRequest1OperationSpec = {
    httpMethod: "POST",
    path: "saml/request",
    queryParameters: [
        Parameters.tid
    ],
    formDataParameters: [
        Parameters.clientId
    ],
    contentType: "application/x-www-form-urlencoded",
    responses: {
        200: {
            bodyMapper: Mappers.SamlGenerateRequestResponse
        },
        default: {
            bodyMapper: Mappers.SamlGenerateRequestResponse
        }
    },
    serializer
};
const getSAMLSettingsOperationSpec = {
    httpMethod: "GET",
    path: "saml/settings",
    queryParameters: [
        Parameters.tid
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SamlSAMLSettings
        },
        default: {
            bodyMapper: Mappers.SamlSAMLSettings
        }
    },
    serializer
};
const createOperationSpec = {
    httpMethod: "POST",
    path: "users",
    requestBody: {
        parameterPath: "body",
        mapper: Object.assign({}, Mappers.UserCreateUser, { required: true })
    },
    responses: {
        202: {
            bodyMapper: Mappers.UserUser
        },
        default: {}
    },
    serializer
};
const getOperationSpec = {
    httpMethod: "GET",
    path: "users/{userId}",
    urlParameters: [
        Parameters.userId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UserUser
        },
        default: {
            bodyMapper: Mappers.UserUser
        }
    },
    serializer
};
const updateOperationSpec = {
    httpMethod: "PUT",
    path: "users/{userId}",
    urlParameters: [
        Parameters.userId
    ],
    requestBody: {
        parameterPath: "body",
        mapper: Object.assign({}, Mappers.UserUser, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.UserUser
        },
        default: {
            bodyMapper: Mappers.UserUser
        }
    },
    serializer
};
const update1OperationSpec = {
    httpMethod: "DELETE",
    path: "users/{userId}",
    urlParameters: [
        Parameters.userId
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer
};
const generateAuthCodeOperationSpec = {
    httpMethod: "GET",
    path: "users/{userId}/authcode",
    urlParameters: [
        Parameters.userId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UserAuthCodeResponse
        },
        default: {
            bodyMapper: Mappers.UserAuthCodeResponse
        }
    },
    serializer
};
//# sourceMappingURL=auth.js.map