/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AuthAPIContext } from "./authAPIContext";

class AuthAPI extends AuthAPIContext {
  /**
   * @class
   * Initializes a new instance of the AuthAPI class.
   * @constructor
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
   * {@link https://github.github.io/fetch/#Request Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(credentials: msRest.ServiceClientCredentials, baseUri?: string, options?: msRest.ServiceClientOptions) {
    super(credentials, baseUri, options);
  }
  // methods on the client.

  /**
   * @summary get the configuration for a tenant
   *
   * @param {string} tenantId The tenant id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getConfigurationWithHttpOperationResponse(tenantId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.TenantConfiguration>> {
    return this.sendOperationRequest(
      {
        tenantId,
        options
      },
      getConfigurationOperationSpec);
  }
  // methods on the client.

  /**
   * @summary get jwks for key validation
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  discoverKeysWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.DiscoveryKeys>> {
    return this.sendOperationRequest(
      {
        options
      },
      discoverKeysOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Oauth2 authorize endpoint
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  authorizeWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.sendOperationRequest(
      {
        options
      },
      authorizeOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Oauth2 token endpoint
   *
   * @param {string} grantType The grant_type to use for obtaining a token
   *
   * @param {AuthAPITokenOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  tokenWithHttpOperationResponse(grantType: string, options?: Models.AuthAPITokenOptionalParams): Promise<msRest.HttpOperationResponse<Models.OauthToken>> {
    return this.sendOperationRequest(
      {
        grantType,
        options
      },
      tokenOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Redirects user back to target login endpoint
   *
   * @param {string} tid The tenant id for this request
   *
   * @param {string} sAMLResponse The SAML AuthNResponse from the Identity Provider
   *
   * @param {string} relayState The relay state obtained from generate request process
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  generateRequestWithHttpOperationResponse(tid: string, sAMLResponse: string, relayState: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.sendOperationRequest(
      {
        tid,
        sAMLResponse,
        relayState,
        options
      },
      generateRequestOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Generates a SAML request
   *
   * @param {string} tid The tenant id for this request
   *
   * @param {string} clientId The Oauth2 client_id that is making the reqeust
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  generateRequest1WithHttpOperationResponse(tid: string, clientId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.SamlGenerateRequestResponse>> {
    return this.sendOperationRequest(
      {
        tid,
        clientId,
        options
      },
      generateRequest1OperationSpec);
  }
  // methods on the client.

  /**
   * @summary Gets the SAML settings for this tenant
   *
   * @param {string} tid The tenant id for this request
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSAMLSettingsWithHttpOperationResponse(tid: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.SamlSAMLSettings>> {
    return this.sendOperationRequest(
      {
        tid,
        options
      },
      getSAMLSettingsOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Create a user.
   *
   * @param {UserCreateUser} body
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createWithHttpOperationResponse(body: Models.UserCreateUser, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.UserUser>> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Gets a user.
   *
   * @param {string} userId identifier of the user
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getWithHttpOperationResponse(userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.UserUser>> {
    return this.sendOperationRequest(
      {
        userId,
        options
      },
      getOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Updates a user.
   *
   * @param {string} userId identifier of the user
   *
   * @param {UserUser} body
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateWithHttpOperationResponse(userId: string, body: Models.UserUser, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.UserUser>> {
    return this.sendOperationRequest(
      {
        userId,
        body,
        options
      },
      updateOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Updates a user.
   *
   * @param {string} userId identifier of the user
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  update1WithHttpOperationResponse(userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.sendOperationRequest(
      {
        userId,
        options
      },
      update1OperationSpec);
  }
  // methods on the client.

  /**
   * @summary Gets an auth code for the user to use for logging in.
   *
   * @param {string} userId identifier of the user
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  generateAuthCodeWithHttpOperationResponse(userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.UserAuthCodeResponse>> {
    return this.sendOperationRequest(
      {
        userId,
        options
      },
      generateAuthCodeOperationSpec);
  }

  /**
   * @summary get the configuration for a tenant
   *
   * @param {string} tenantId The tenant id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.TenantConfiguration} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.TenantConfiguration} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getConfiguration(tenantId: string): Promise<Models.TenantConfiguration>;
  getConfiguration(tenantId: string, options: msRest.RequestOptionsBase): Promise<Models.TenantConfiguration>;
  getConfiguration(tenantId: string, callback: msRest.ServiceCallback<Models.TenantConfiguration>): void;
  getConfiguration(tenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantConfiguration>): void;
  getConfiguration(tenantId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.TenantConfiguration>): any {
    return msRest.responseToBody(this.getConfigurationWithHttpOperationResponse.bind(this), tenantId, options, callback);
  }

  /**
   * @summary get jwks for key validation
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.DiscoveryKeys} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.DiscoveryKeys} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  discoverKeys(): Promise<Models.DiscoveryKeys>;
  discoverKeys(options: msRest.RequestOptionsBase): Promise<Models.DiscoveryKeys>;
  discoverKeys(callback: msRest.ServiceCallback<Models.DiscoveryKeys>): void;
  discoverKeys(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiscoveryKeys>): void;
  discoverKeys(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DiscoveryKeys>): any {
    return msRest.responseToBody(this.discoverKeysWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @summary Oauth2 authorize endpoint
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  authorize(): Promise<void>;
  authorize(options: msRest.RequestOptionsBase): Promise<void>;
  authorize(callback: msRest.ServiceCallback<void>): void;
  authorize(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  authorize(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.authorizeWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @summary Oauth2 token endpoint
   *
   * @param {string} grantType The grant_type to use for obtaining a token
   *
   * @param {AuthAPITokenOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.OauthToken} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.OauthToken} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  token(grantType: string): Promise<Models.OauthToken>;
  token(grantType: string, options: Models.AuthAPITokenOptionalParams): Promise<Models.OauthToken>;
  token(grantType: string, callback: msRest.ServiceCallback<Models.OauthToken>): void;
  token(grantType: string, options: Models.AuthAPITokenOptionalParams, callback: msRest.ServiceCallback<Models.OauthToken>): void;
  token(grantType: string, options?: Models.AuthAPITokenOptionalParams, callback?: msRest.ServiceCallback<Models.OauthToken>): any {
    return msRest.responseToBody(this.tokenWithHttpOperationResponse.bind(this), grantType, options, callback);
  }

  /**
   * @summary Redirects user back to target login endpoint
   *
   * @param {string} tid The tenant id for this request
   *
   * @param {string} sAMLResponse The SAML AuthNResponse from the Identity Provider
   *
   * @param {string} relayState The relay state obtained from generate request process
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  generateRequest(tid: string, sAMLResponse: string, relayState: string): Promise<void>;
  generateRequest(tid: string, sAMLResponse: string, relayState: string, options: msRest.RequestOptionsBase): Promise<void>;
  generateRequest(tid: string, sAMLResponse: string, relayState: string, callback: msRest.ServiceCallback<void>): void;
  generateRequest(tid: string, sAMLResponse: string, relayState: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  generateRequest(tid: string, sAMLResponse: string, relayState: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.generateRequestWithHttpOperationResponse.bind(this), tid, sAMLResponse, relayState, options, callback);
  }

  /**
   * @summary Generates a SAML request
   *
   * @param {string} tid The tenant id for this request
   *
   * @param {string} clientId The Oauth2 client_id that is making the reqeust
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.SamlGenerateRequestResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.SamlGenerateRequestResponse} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  generateRequest1(tid: string, clientId: string): Promise<Models.SamlGenerateRequestResponse>;
  generateRequest1(tid: string, clientId: string, options: msRest.RequestOptionsBase): Promise<Models.SamlGenerateRequestResponse>;
  generateRequest1(tid: string, clientId: string, callback: msRest.ServiceCallback<Models.SamlGenerateRequestResponse>): void;
  generateRequest1(tid: string, clientId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SamlGenerateRequestResponse>): void;
  generateRequest1(tid: string, clientId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SamlGenerateRequestResponse>): any {
    return msRest.responseToBody(this.generateRequest1WithHttpOperationResponse.bind(this), tid, clientId, options, callback);
  }

  /**
   * @summary Gets the SAML settings for this tenant
   *
   * @param {string} tid The tenant id for this request
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.SamlSAMLSettings} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.SamlSAMLSettings} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSAMLSettings(tid: string): Promise<Models.SamlSAMLSettings>;
  getSAMLSettings(tid: string, options: msRest.RequestOptionsBase): Promise<Models.SamlSAMLSettings>;
  getSAMLSettings(tid: string, callback: msRest.ServiceCallback<Models.SamlSAMLSettings>): void;
  getSAMLSettings(tid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SamlSAMLSettings>): void;
  getSAMLSettings(tid: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SamlSAMLSettings>): any {
    return msRest.responseToBody(this.getSAMLSettingsWithHttpOperationResponse.bind(this), tid, options, callback);
  }

  /**
   * @summary Create a user.
   *
   * @param {UserCreateUser} body
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.UserUser} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.UserUser} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  create(body: Models.UserCreateUser): Promise<Models.UserUser>;
  create(body: Models.UserCreateUser, options: msRest.RequestOptionsBase): Promise<Models.UserUser>;
  create(body: Models.UserCreateUser, callback: msRest.ServiceCallback<Models.UserUser>): void;
  create(body: Models.UserCreateUser, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserUser>): void;
  create(body: Models.UserCreateUser, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.UserUser>): any {
    return msRest.responseToBody(this.createWithHttpOperationResponse.bind(this), body, options, callback);
  }

  /**
   * @summary Gets a user.
   *
   * @param {string} userId identifier of the user
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.UserUser} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.UserUser} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get(userId: string): Promise<Models.UserUser>;
  get(userId: string, options: msRest.RequestOptionsBase): Promise<Models.UserUser>;
  get(userId: string, callback: msRest.ServiceCallback<Models.UserUser>): void;
  get(userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserUser>): void;
  get(userId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.UserUser>): any {
    return msRest.responseToBody(this.getWithHttpOperationResponse.bind(this), userId, options, callback);
  }

  /**
   * @summary Updates a user.
   *
   * @param {string} userId identifier of the user
   *
   * @param {UserUser} body
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.UserUser} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.UserUser} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  update(userId: string, body: Models.UserUser): Promise<Models.UserUser>;
  update(userId: string, body: Models.UserUser, options: msRest.RequestOptionsBase): Promise<Models.UserUser>;
  update(userId: string, body: Models.UserUser, callback: msRest.ServiceCallback<Models.UserUser>): void;
  update(userId: string, body: Models.UserUser, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserUser>): void;
  update(userId: string, body: Models.UserUser, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.UserUser>): any {
    return msRest.responseToBody(this.updateWithHttpOperationResponse.bind(this), userId, body, options, callback);
  }

  /**
   * @summary Updates a user.
   *
   * @param {string} userId identifier of the user
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  update1(userId: string): Promise<void>;
  update1(userId: string, options: msRest.RequestOptionsBase): Promise<void>;
  update1(userId: string, callback: msRest.ServiceCallback<void>): void;
  update1(userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  update1(userId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.update1WithHttpOperationResponse.bind(this), userId, options, callback);
  }

  /**
   * @summary Gets an auth code for the user to use for logging in.
   *
   * @param {string} userId identifier of the user
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.UserAuthCodeResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.UserAuthCodeResponse} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  generateAuthCode(userId: string): Promise<Models.UserAuthCodeResponse>;
  generateAuthCode(userId: string, options: msRest.RequestOptionsBase): Promise<Models.UserAuthCodeResponse>;
  generateAuthCode(userId: string, callback: msRest.ServiceCallback<Models.UserAuthCodeResponse>): void;
  generateAuthCode(userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserAuthCodeResponse>): void;
  generateAuthCode(userId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.UserAuthCodeResponse>): any {
    return msRest.responseToBody(this.generateAuthCodeWithHttpOperationResponse.bind(this), userId, options, callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "configuration/{tenantId}",
  urlParameters: [
    Parameters.tenantId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TenantConfiguration
    },
    default: {
      bodyMapper: Mappers.TenantConfiguration
    }
  },
  serializer
};

const discoverKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "discovery/keys",
  responses: {
    200: {
      bodyMapper: Mappers.DiscoveryKeys
    },
    default: {
      bodyMapper: Mappers.DiscoveryKeys
    }
  },
  serializer
};

const authorizeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "oauth2/authorize",
  responses: {
    302: {},
    default: {}
  },
  serializer
};

const tokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "oauth2/token",
  formDataParameters: [
    Parameters.grantType,
    Parameters.username,
    Parameters.password,
    Parameters.code,
    Parameters.refreshToken
  ],
  contentType: "application/x-www-form-urlencoded",
  responses: {
    200: {
      bodyMapper: Mappers.OauthToken
    },
    400: {},
    403: {},
    500: {},
    default: {
      bodyMapper: Mappers.OauthToken
    }
  },
  serializer
};

const generateRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "saml/access",
  queryParameters: [
    Parameters.tid
  ],
  formDataParameters: [
    Parameters.sAMLResponse,
    Parameters.relayState
  ],
  contentType: "application/x-www-form-urlencoded",
  responses: {
    302: {},
    default: {}
  },
  serializer
};

const generateRequest1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "saml/request",
  queryParameters: [
    Parameters.tid
  ],
  formDataParameters: [
    Parameters.clientId
  ],
  contentType: "application/x-www-form-urlencoded",
  responses: {
    200: {
      bodyMapper: Mappers.SamlGenerateRequestResponse
    },
    default: {
      bodyMapper: Mappers.SamlGenerateRequestResponse
    }
  },
  serializer
};

const getSAMLSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "saml/settings",
  queryParameters: [
    Parameters.tid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SamlSAMLSettings
    },
    default: {
      bodyMapper: Mappers.SamlSAMLSettings
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "users",
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.UserCreateUser,
      required: true
    }
  },
  responses: {
    202: {
      bodyMapper: Mappers.UserUser
    },
    default: {}
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "users/{userId}",
  urlParameters: [
    Parameters.userId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UserUser
    },
    default: {
      bodyMapper: Mappers.UserUser
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "users/{userId}",
  urlParameters: [
    Parameters.userId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.UserUser,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.UserUser
    },
    default: {
      bodyMapper: Mappers.UserUser
    }
  },
  serializer
};

const update1OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "users/{userId}",
  urlParameters: [
    Parameters.userId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const generateAuthCodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "users/{userId}/authcode",
  urlParameters: [
    Parameters.userId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UserAuthCodeResponse
    },
    default: {
      bodyMapper: Mappers.UserAuthCodeResponse
    }
  },
  serializer
};

export { AuthAPI, Models as AuthAPIModels, Mappers as AuthAPIMappers };
