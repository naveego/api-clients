/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AuthAPIContext } from "./authAPIContext";

class AuthAPI extends AuthAPIContext {
  /**
   * Initializes a new instance of the AuthAPI class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, options?: Models.AuthAPIOptions) {
    super(credentials, options);
  }

  /**
   * @summary get the configuration for a tenant
   * @param tenantId The tenant id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetConfigurationResponse>
   */
  getConfiguration(tenantId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetConfigurationResponse>;
  /**
   * @param tenantId The tenant id
   * @param callback The callback
   */
  getConfiguration(tenantId: string, callback: msRest.ServiceCallback<Models.TenantConfiguration>): void;
  /**
   * @param tenantId The tenant id
   * @param options The optional parameters
   * @param callback The callback
   */
  getConfiguration(tenantId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TenantConfiguration>): void;
  getConfiguration(tenantId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TenantConfiguration>, callback?: msRest.ServiceCallback<Models.TenantConfiguration>): Promise<Models.GetConfigurationResponse> {
    return this.sendOperationRequest(
      {
        tenantId,
        options
      },
      getConfigurationOperationSpec,
      callback) as Promise<Models.GetConfigurationResponse>;
  }

  /**
   * @summary get jwks for key validation
   * @param [options] The optional parameters
   * @returns Promise<Models.DiscoverKeysResponse>
   */
  discoverKeys(options?: msRest.RequestOptionsBase): Promise<Models.DiscoverKeysResponse>;
  /**
   * @param callback The callback
   */
  discoverKeys(callback: msRest.ServiceCallback<Models.DiscoveryKeys>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  discoverKeys(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiscoveryKeys>): void;
  discoverKeys(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiscoveryKeys>, callback?: msRest.ServiceCallback<Models.DiscoveryKeys>): Promise<Models.DiscoverKeysResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      discoverKeysOperationSpec,
      callback) as Promise<Models.DiscoverKeysResponse>;
  }

  /**
   * @summary Oauth2 authorize endpoint
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  authorize(options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  authorize(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  authorize(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  authorize(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      authorizeOperationSpec,
      callback);
  }

  /**
   * @summary Oauth2 token endpoint
   * @param grantType The grant_type to use for obtaining a token
   * @param [options] The optional parameters
   * @returns Promise<Models.TokenResponse>
   */
  token(grantType: string, options?: Models.AuthAPITokenOptionalParams): Promise<Models.TokenResponse>;
  /**
   * @param grantType The grant_type to use for obtaining a token
   * @param callback The callback
   */
  token(grantType: string, callback: msRest.ServiceCallback<Models.OauthToken>): void;
  /**
   * @param grantType The grant_type to use for obtaining a token
   * @param options The optional parameters
   * @param callback The callback
   */
  token(grantType: string, options: Models.AuthAPITokenOptionalParams, callback: msRest.ServiceCallback<Models.OauthToken>): void;
  token(grantType: string, options?: Models.AuthAPITokenOptionalParams | msRest.ServiceCallback<Models.OauthToken>, callback?: msRest.ServiceCallback<Models.OauthToken>): Promise<Models.TokenResponse> {
    return this.sendOperationRequest(
      {
        grantType,
        options
      },
      tokenOperationSpec,
      callback) as Promise<Models.TokenResponse>;
  }

  /**
   * @summary Redirects user back to target login endpoint
   * @param tid The tenant id for this request
   * @param sAMLResponse The SAML AuthNResponse from the Identity Provider
   * @param relayState The relay state obtained from generate request process
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  generateRequest(tid: string, sAMLResponse: string, relayState: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param tid The tenant id for this request
   * @param sAMLResponse The SAML AuthNResponse from the Identity Provider
   * @param relayState The relay state obtained from generate request process
   * @param callback The callback
   */
  generateRequest(tid: string, sAMLResponse: string, relayState: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param tid The tenant id for this request
   * @param sAMLResponse The SAML AuthNResponse from the Identity Provider
   * @param relayState The relay state obtained from generate request process
   * @param options The optional parameters
   * @param callback The callback
   */
  generateRequest(tid: string, sAMLResponse: string, relayState: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  generateRequest(tid: string, sAMLResponse: string, relayState: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        tid,
        sAMLResponse,
        relayState,
        options
      },
      generateRequestOperationSpec,
      callback);
  }

  /**
   * @summary Generates a SAML request
   * @param tid The tenant id for this request
   * @param clientId The Oauth2 client_id that is making the reqeust
   * @param [options] The optional parameters
   * @returns Promise<Models.GenerateRequest1Response>
   */
  generateRequest1(tid: string, clientId: string, options?: msRest.RequestOptionsBase): Promise<Models.GenerateRequest1Response>;
  /**
   * @param tid The tenant id for this request
   * @param clientId The Oauth2 client_id that is making the reqeust
   * @param callback The callback
   */
  generateRequest1(tid: string, clientId: string, callback: msRest.ServiceCallback<Models.SamlGenerateRequestResponse>): void;
  /**
   * @param tid The tenant id for this request
   * @param clientId The Oauth2 client_id that is making the reqeust
   * @param options The optional parameters
   * @param callback The callback
   */
  generateRequest1(tid: string, clientId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SamlGenerateRequestResponse>): void;
  generateRequest1(tid: string, clientId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SamlGenerateRequestResponse>, callback?: msRest.ServiceCallback<Models.SamlGenerateRequestResponse>): Promise<Models.GenerateRequest1Response> {
    return this.sendOperationRequest(
      {
        tid,
        clientId,
        options
      },
      generateRequest1OperationSpec,
      callback) as Promise<Models.GenerateRequest1Response>;
  }

  /**
   * @summary Gets the SAML settings for this tenant
   * @param tid The tenant id for this request
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSAMLSettingsResponse>
   */
  getSAMLSettings(tid: string, options?: msRest.RequestOptionsBase): Promise<Models.GetSAMLSettingsResponse>;
  /**
   * @param tid The tenant id for this request
   * @param callback The callback
   */
  getSAMLSettings(tid: string, callback: msRest.ServiceCallback<Models.SamlSAMLSettings>): void;
  /**
   * @param tid The tenant id for this request
   * @param options The optional parameters
   * @param callback The callback
   */
  getSAMLSettings(tid: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SamlSAMLSettings>): void;
  getSAMLSettings(tid: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SamlSAMLSettings>, callback?: msRest.ServiceCallback<Models.SamlSAMLSettings>): Promise<Models.GetSAMLSettingsResponse> {
    return this.sendOperationRequest(
      {
        tid,
        options
      },
      getSAMLSettingsOperationSpec,
      callback) as Promise<Models.GetSAMLSettingsResponse>;
  }

  /**
   * @summary Create a user.
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateResponse>
   */
  create(body: Models.UserCreateUser, options?: msRest.RequestOptionsBase): Promise<Models.CreateResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  create(body: Models.UserCreateUser, callback: msRest.ServiceCallback<Models.UserUser>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  create(body: Models.UserCreateUser, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserUser>): void;
  create(body: Models.UserCreateUser, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserUser>, callback?: msRest.ServiceCallback<Models.UserUser>): Promise<Models.CreateResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.CreateResponse>;
  }

  /**
   * @summary Provides a login endpoint that can generate an auth code for the user given valid user
   * credentials.
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.LoginUserResponse>
   */
  loginUser(body: Models.UserLoginRequest, options?: Models.AuthAPILoginUserOptionalParams): Promise<Models.LoginUserResponse>;
  /**
   * @param body
   * @param callback The callback
   */
  loginUser(body: Models.UserLoginRequest, callback: msRest.ServiceCallback<Models.UserLoginResponse>): void;
  /**
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  loginUser(body: Models.UserLoginRequest, options: Models.AuthAPILoginUserOptionalParams, callback: msRest.ServiceCallback<Models.UserLoginResponse>): void;
  loginUser(body: Models.UserLoginRequest, options?: Models.AuthAPILoginUserOptionalParams | msRest.ServiceCallback<Models.UserLoginResponse>, callback?: msRest.ServiceCallback<Models.UserLoginResponse>): Promise<Models.LoginUserResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      loginUserOperationSpec,
      callback) as Promise<Models.LoginUserResponse>;
  }

  /**
   * @summary Gets a user.
   * @param userId identifier of the user
   * @param [options] The optional parameters
   * @returns Promise<Models.GetResponse>
   */
  get(userId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetResponse>;
  /**
   * @param userId identifier of the user
   * @param callback The callback
   */
  get(userId: string, callback: msRest.ServiceCallback<Models.UserUser>): void;
  /**
   * @param userId identifier of the user
   * @param options The optional parameters
   * @param callback The callback
   */
  get(userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserUser>): void;
  get(userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserUser>, callback?: msRest.ServiceCallback<Models.UserUser>): Promise<Models.GetResponse> {
    return this.sendOperationRequest(
      {
        userId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.GetResponse>;
  }

  /**
   * @summary Updates a user.
   * @param userId identifier of the user
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateResponse>
   */
  update(userId: string, body: Models.UserUser, options?: msRest.RequestOptionsBase): Promise<Models.UpdateResponse>;
  /**
   * @param userId identifier of the user
   * @param body
   * @param callback The callback
   */
  update(userId: string, body: Models.UserUser, callback: msRest.ServiceCallback<Models.UserUser>): void;
  /**
   * @param userId identifier of the user
   * @param body
   * @param options The optional parameters
   * @param callback The callback
   */
  update(userId: string, body: Models.UserUser, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserUser>): void;
  update(userId: string, body: Models.UserUser, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserUser>, callback?: msRest.ServiceCallback<Models.UserUser>): Promise<Models.UpdateResponse> {
    return this.sendOperationRequest(
      {
        userId,
        body,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.UpdateResponse>;
  }

  /**
   * @summary Updates a user.
   * @param userId identifier of the user
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  update1(userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param userId identifier of the user
   * @param callback The callback
   */
  update1(userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param userId identifier of the user
   * @param options The optional parameters
   * @param callback The callback
   */
  update1(userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  update1(userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        userId,
        options
      },
      update1OperationSpec,
      callback);
  }

  /**
   * @summary Gets an auth code for the user to use for logging in.
   * @param userId identifier of the user
   * @param [options] The optional parameters
   * @returns Promise<Models.GenerateAuthCodeResponse>
   */
  generateAuthCode(userId: string, options?: msRest.RequestOptionsBase): Promise<Models.GenerateAuthCodeResponse>;
  /**
   * @param userId identifier of the user
   * @param callback The callback
   */
  generateAuthCode(userId: string, callback: msRest.ServiceCallback<Models.UserAuthCodeResponse>): void;
  /**
   * @param userId identifier of the user
   * @param options The optional parameters
   * @param callback The callback
   */
  generateAuthCode(userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserAuthCodeResponse>): void;
  generateAuthCode(userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserAuthCodeResponse>, callback?: msRest.ServiceCallback<Models.UserAuthCodeResponse>): Promise<Models.GenerateAuthCodeResponse> {
    return this.sendOperationRequest(
      {
        userId,
        options
      },
      generateAuthCodeOperationSpec,
      callback) as Promise<Models.GenerateAuthCodeResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getConfigurationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "configuration/{tenantId}",
  urlParameters: [
    Parameters.tenantId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TenantConfiguration
    },
    default: {
      bodyMapper: Mappers.TenantConfiguration
    }
  },
  serializer
};

const discoverKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "discovery/keys",
  responses: {
    200: {
      bodyMapper: Mappers.DiscoveryKeys
    },
    default: {
      bodyMapper: Mappers.DiscoveryKeys
    }
  },
  serializer
};

const authorizeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "oauth2/authorize",
  responses: {
    302: {},
    default: {}
  },
  serializer
};

const tokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "oauth2/token",
  formDataParameters: [
    Parameters.grantType,
    Parameters.username,
    Parameters.password,
    Parameters.code,
    Parameters.refreshToken
  ],
  contentType: "application/x-www-form-urlencoded",
  responses: {
    200: {
      bodyMapper: Mappers.OauthToken
    },
    400: {},
    403: {},
    500: {},
    default: {
      bodyMapper: Mappers.OauthToken
    }
  },
  serializer
};

const generateRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "saml/access",
  queryParameters: [
    Parameters.tid
  ],
  formDataParameters: [
    Parameters.sAMLResponse,
    Parameters.relayState
  ],
  contentType: "application/x-www-form-urlencoded",
  responses: {
    302: {},
    default: {}
  },
  serializer
};

const generateRequest1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "saml/request",
  queryParameters: [
    Parameters.tid
  ],
  formDataParameters: [
    Parameters.clientId0
  ],
  contentType: "application/x-www-form-urlencoded",
  responses: {
    200: {
      bodyMapper: Mappers.SamlGenerateRequestResponse
    },
    default: {
      bodyMapper: Mappers.SamlGenerateRequestResponse
    }
  },
  serializer
};

const getSAMLSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "saml/settings",
  queryParameters: [
    Parameters.tid
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SamlSAMLSettings
    },
    default: {
      bodyMapper: Mappers.SamlSAMLSettings
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "users",
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.UserCreateUser,
      required: true
    }
  },
  responses: {
    202: {
      bodyMapper: Mappers.UserUser
    },
    default: {}
  },
  serializer
};

const loginUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "users/login",
  queryParameters: [
    Parameters.clientId1
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.UserLoginRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.UserLoginResponse
    },
    default: {
      bodyMapper: Mappers.UserLoginResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "users/{userId}",
  urlParameters: [
    Parameters.userId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UserUser
    },
    default: {
      bodyMapper: Mappers.UserUser
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "users/{userId}",
  urlParameters: [
    Parameters.userId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.UserUser,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.UserUser
    },
    default: {
      bodyMapper: Mappers.UserUser
    }
  },
  serializer
};

const update1OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "users/{userId}",
  urlParameters: [
    Parameters.userId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const generateAuthCodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "users/{userId}/authcode",
  urlParameters: [
    Parameters.userId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UserAuthCodeResponse
    },
    default: {
      bodyMapper: Mappers.UserAuthCodeResponse
    }
  },
  serializer
};

export {
  AuthAPI,
  AuthAPIContext,
  Models as AuthAPIModels,
  Mappers as AuthAPIMappers
};
