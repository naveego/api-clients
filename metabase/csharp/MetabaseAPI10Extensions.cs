// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Naveego.Metabase
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MetabaseAPI10.
    /// </summary>
    public static partial class MetabaseAPI10Extensions
    {
            /// <summary>
            /// Set batch status for go between batch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='status'>
            /// </param>
            public static IDictionary<string, IList<string>> SetBatchStatusForGoBetweenBatch(this IMetabaseAPI10 operations, string id, BatchStatusGoBetweenScope status)
            {
                return operations.SetBatchStatusForGoBetweenBatchAsync(id, status).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set batch status for go between batch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='status'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IList<string>>> SetBatchStatusForGoBetweenBatchAsync(this IMetabaseAPI10 operations, string id, BatchStatusGoBetweenScope status, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetBatchStatusForGoBetweenBatchWithHttpMessagesAsync(id, status, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get paged statuses for batch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static PagedResultOfBatchStatus GetPagedStatusesForBatch(this IMetabaseAPI10 operations, string id, int? page = default(int?), int? pageSize = default(int?))
            {
                return operations.GetPagedStatusesForBatchAsync(id, page, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get paged statuses for batch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultOfBatchStatus> GetPagedStatusesForBatchAsync(this IMetabaseAPI10 operations, string id, int? page = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPagedStatusesForBatchWithHttpMessagesAsync(id, page, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Events placeholder for batch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static DataflowEvent EventsPlaceholderForBatch(this IMetabaseAPI10 operations)
            {
                return operations.EventsPlaceholderForBatchAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Events placeholder for batch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataflowEvent> EventsPlaceholderForBatchAsync(this IMetabaseAPI10 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventsPlaceholderForBatchWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all batches.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='createdBy'>
            /// </param>
            /// <param name='updatedBy'>
            /// </param>
            /// <param name='deletedBy'>
            /// </param>
            public static IList<Batch> GetAllBatches(this IMetabaseAPI10 operations, string id = default(string), string name = default(string), string description = default(string), string jobId = default(string), string createdBy = default(string), string updatedBy = default(string), string deletedBy = default(string))
            {
                return operations.GetAllBatchesAsync(id, name, description, jobId, createdBy, updatedBy, deletedBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all batches.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='createdBy'>
            /// </param>
            /// <param name='updatedBy'>
            /// </param>
            /// <param name='deletedBy'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Batch>> GetAllBatchesAsync(this IMetabaseAPI10 operations, string id = default(string), string name = default(string), string description = default(string), string jobId = default(string), string createdBy = default(string), string updatedBy = default(string), string deletedBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllBatchesWithHttpMessagesAsync(id, name, description, jobId, createdBy, updatedBy, deletedBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create batch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// </param>
            public static object CreateBatch(this IMetabaseAPI10 operations, Batch input)
            {
                return operations.CreateBatchAsync(input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create batch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateBatchAsync(this IMetabaseAPI10 operations, Batch input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateBatchWithHttpMessagesAsync(input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get one batch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static Batch GetOneBatch(this IMetabaseAPI10 operations, string id, int? version = default(int?))
            {
                return operations.GetOneBatchAsync(id, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get one batch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Batch> GetOneBatchAsync(this IMetabaseAPI10 operations, string id, int? version = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOneBatchWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update batch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object UpdateBatch(this IMetabaseAPI10 operations, string id, Batch model)
            {
                return operations.UpdateBatchAsync(id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update batch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateBatchAsync(this IMetabaseAPI10 operations, string id, Batch model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateBatchWithHttpMessagesAsync(id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete batch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteBatch(this IMetabaseAPI10 operations, string id)
            {
                operations.DeleteBatchAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete batch.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteBatchAsync(this IMetabaseAPI10 operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteBatchWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get batch versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<Batch> GetBatchVersions(this IMetabaseAPI10 operations, string id)
            {
                return operations.GetBatchVersionsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get batch versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Batch>> GetBatchVersionsAsync(this IMetabaseAPI10 operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBatchVersionsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='plugin'>
            /// </param>
            /// <param name='preferredAgent'>
            /// </param>
            /// <param name='createdBy'>
            /// </param>
            /// <param name='updatedBy'>
            /// </param>
            /// <param name='deletedBy'>
            /// </param>
            public static IList<Connection> GetAllConnections(this IMetabaseAPI10 operations, string id = default(string), string name = default(string), string description = default(string), string plugin = default(string), string preferredAgent = default(string), string createdBy = default(string), string updatedBy = default(string), string deletedBy = default(string))
            {
                return operations.GetAllConnectionsAsync(id, name, description, plugin, preferredAgent, createdBy, updatedBy, deletedBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all connections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='plugin'>
            /// </param>
            /// <param name='preferredAgent'>
            /// </param>
            /// <param name='createdBy'>
            /// </param>
            /// <param name='updatedBy'>
            /// </param>
            /// <param name='deletedBy'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Connection>> GetAllConnectionsAsync(this IMetabaseAPI10 operations, string id = default(string), string name = default(string), string description = default(string), string plugin = default(string), string preferredAgent = default(string), string createdBy = default(string), string updatedBy = default(string), string deletedBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllConnectionsWithHttpMessagesAsync(id, name, description, plugin, preferredAgent, createdBy, updatedBy, deletedBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// </param>
            public static object CreateConnection(this IMetabaseAPI10 operations, Connection input)
            {
                return operations.CreateConnectionAsync(input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateConnectionAsync(this IMetabaseAPI10 operations, Connection input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateConnectionWithHttpMessagesAsync(input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get one connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static Connection GetOneConnection(this IMetabaseAPI10 operations, string id, int? version = default(int?))
            {
                return operations.GetOneConnectionAsync(id, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get one connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Connection> GetOneConnectionAsync(this IMetabaseAPI10 operations, string id, int? version = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOneConnectionWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object UpdateConnection(this IMetabaseAPI10 operations, string id, Connection model)
            {
                return operations.UpdateConnectionAsync(id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateConnectionAsync(this IMetabaseAPI10 operations, string id, Connection model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConnectionWithHttpMessagesAsync(id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteConnection(this IMetabaseAPI10 operations, string id)
            {
                operations.DeleteConnectionAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteConnectionAsync(this IMetabaseAPI10 operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteConnectionWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get connection versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<Connection> GetConnectionVersions(this IMetabaseAPI10 operations, string id)
            {
                return operations.GetConnectionVersionsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get connection versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Connection>> GetConnectionVersionsAsync(this IMetabaseAPI10 operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConnectionVersionsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all flows.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='createdBy'>
            /// </param>
            /// <param name='updatedBy'>
            /// </param>
            /// <param name='deletedBy'>
            /// </param>
            public static IList<Flow> GetAllFlows(this IMetabaseAPI10 operations, string id = default(string), string name = default(string), string description = default(string), string createdBy = default(string), string updatedBy = default(string), string deletedBy = default(string))
            {
                return operations.GetAllFlowsAsync(id, name, description, createdBy, updatedBy, deletedBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all flows.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='createdBy'>
            /// </param>
            /// <param name='updatedBy'>
            /// </param>
            /// <param name='deletedBy'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Flow>> GetAllFlowsAsync(this IMetabaseAPI10 operations, string id = default(string), string name = default(string), string description = default(string), string createdBy = default(string), string updatedBy = default(string), string deletedBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllFlowsWithHttpMessagesAsync(id, name, description, createdBy, updatedBy, deletedBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create flow.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// </param>
            public static object CreateFlow(this IMetabaseAPI10 operations, Flow input)
            {
                return operations.CreateFlowAsync(input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create flow.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateFlowAsync(this IMetabaseAPI10 operations, Flow input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateFlowWithHttpMessagesAsync(input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get one flow.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static Flow GetOneFlow(this IMetabaseAPI10 operations, string id, int? version = default(int?))
            {
                return operations.GetOneFlowAsync(id, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get one flow.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Flow> GetOneFlowAsync(this IMetabaseAPI10 operations, string id, int? version = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOneFlowWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update flow.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object UpdateFlow(this IMetabaseAPI10 operations, string id, Flow model)
            {
                return operations.UpdateFlowAsync(id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update flow.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateFlowAsync(this IMetabaseAPI10 operations, string id, Flow model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateFlowWithHttpMessagesAsync(id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete flow.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteFlow(this IMetabaseAPI10 operations, string id)
            {
                operations.DeleteFlowAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete flow.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteFlowAsync(this IMetabaseAPI10 operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteFlowWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get flow versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<Flow> GetFlowVersions(this IMetabaseAPI10 operations, string id)
            {
                return operations.GetFlowVersionsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get flow versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Flow>> GetFlowVersionsAsync(this IMetabaseAPI10 operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFlowVersionsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get job mapping.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static Mapping GetJobMapping(this IMetabaseAPI10 operations, string id, int? version = default(int?))
            {
                return operations.GetJobMappingAsync(id, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get job mapping.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Mapping> GetJobMappingAsync(this IMetabaseAPI10 operations, string id, int? version = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetJobMappingWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set job status for go between.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='status'>
            /// </param>
            public static IDictionary<string, IList<string>> SetJobStatusForGoBetween(this IMetabaseAPI10 operations, string id, JobStatusGoBetweenScope status)
            {
                return operations.SetJobStatusForGoBetweenAsync(id, status).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set job status for go between.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='status'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IList<string>>> SetJobStatusForGoBetweenAsync(this IMetabaseAPI10 operations, string id, JobStatusGoBetweenScope status, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetJobStatusForGoBetweenWithHttpMessagesAsync(id, status, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set real time state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='state'>
            /// </param>
            public static IDictionary<string, IList<string>> SetRealTimeState(this IMetabaseAPI10 operations, string id, RealTimeStateScope state)
            {
                return operations.SetRealTimeStateAsync(id, state).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set real time state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IList<string>>> SetRealTimeStateAsync(this IMetabaseAPI10 operations, string id, RealTimeStateScope state, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetRealTimeStateWithHttpMessagesAsync(id, state, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all jobs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='connectionId'>
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='shapeId'>
            /// </param>
            /// <param name='agentId'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='createdBy'>
            /// </param>
            /// <param name='updatedBy'>
            /// </param>
            /// <param name='deletedBy'>
            /// </param>
            public static IList<Job> GetAllJobs(this IMetabaseAPI10 operations, string id = default(string), string name = default(string), string description = default(string), string connectionId = default(string), string schemaId = default(string), string shapeId = default(string), string agentId = default(string), string type = default(string), string createdBy = default(string), string updatedBy = default(string), string deletedBy = default(string))
            {
                return operations.GetAllJobsAsync(id, name, description, connectionId, schemaId, shapeId, agentId, type, createdBy, updatedBy, deletedBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all jobs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='connectionId'>
            /// </param>
            /// <param name='schemaId'>
            /// </param>
            /// <param name='shapeId'>
            /// </param>
            /// <param name='agentId'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='createdBy'>
            /// </param>
            /// <param name='updatedBy'>
            /// </param>
            /// <param name='deletedBy'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Job>> GetAllJobsAsync(this IMetabaseAPI10 operations, string id = default(string), string name = default(string), string description = default(string), string connectionId = default(string), string schemaId = default(string), string shapeId = default(string), string agentId = default(string), string type = default(string), string createdBy = default(string), string updatedBy = default(string), string deletedBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllJobsWithHttpMessagesAsync(id, name, description, connectionId, schemaId, shapeId, agentId, type, createdBy, updatedBy, deletedBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// </param>
            public static object CreateJob(this IMetabaseAPI10 operations, Job input)
            {
                return operations.CreateJobAsync(input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateJobAsync(this IMetabaseAPI10 operations, Job input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateJobWithHttpMessagesAsync(input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get paged statuses for job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static PagedResultOfJobStatus GetPagedStatusesForJob(this IMetabaseAPI10 operations, string id, int? page = default(int?), int? pageSize = default(int?))
            {
                return operations.GetPagedStatusesForJobAsync(id, page, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get paged statuses for job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResultOfJobStatus> GetPagedStatusesForJobAsync(this IMetabaseAPI10 operations, string id, int? page = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPagedStatusesForJobWithHttpMessagesAsync(id, page, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Events placeholder for job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static DataflowEvent EventsPlaceholderForJob(this IMetabaseAPI10 operations)
            {
                return operations.EventsPlaceholderForJobAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Events placeholder for job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataflowEvent> EventsPlaceholderForJobAsync(this IMetabaseAPI10 operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventsPlaceholderForJobWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get one job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static Job GetOneJob(this IMetabaseAPI10 operations, string id, int? version = default(int?))
            {
                return operations.GetOneJobAsync(id, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get one job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> GetOneJobAsync(this IMetabaseAPI10 operations, string id, int? version = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOneJobWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object UpdateJob(this IMetabaseAPI10 operations, string id, Job model)
            {
                return operations.UpdateJobAsync(id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateJobAsync(this IMetabaseAPI10 operations, string id, Job model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateJobWithHttpMessagesAsync(id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteJob(this IMetabaseAPI10 operations, string id)
            {
                operations.DeleteJobAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteJobAsync(this IMetabaseAPI10 operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteJobWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get job versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<Job> GetJobVersions(this IMetabaseAPI10 operations, string id)
            {
                return operations.GetJobVersionsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get job versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Job>> GetJobVersionsAsync(this IMetabaseAPI10 operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetJobVersionsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all schema profiles.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='connectionId'>
            /// </param>
            /// <param name='createdBy'>
            /// </param>
            /// <param name='updatedBy'>
            /// </param>
            /// <param name='deletedBy'>
            /// </param>
            public static IList<SchemaProfile> GetAllSchemaProfiles(this IMetabaseAPI10 operations, string id = default(string), string name = default(string), string description = default(string), string connectionId = default(string), string createdBy = default(string), string updatedBy = default(string), string deletedBy = default(string))
            {
                return operations.GetAllSchemaProfilesAsync(id, name, description, connectionId, createdBy, updatedBy, deletedBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all schema profiles.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='connectionId'>
            /// </param>
            /// <param name='createdBy'>
            /// </param>
            /// <param name='updatedBy'>
            /// </param>
            /// <param name='deletedBy'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SchemaProfile>> GetAllSchemaProfilesAsync(this IMetabaseAPI10 operations, string id = default(string), string name = default(string), string description = default(string), string connectionId = default(string), string createdBy = default(string), string updatedBy = default(string), string deletedBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllSchemaProfilesWithHttpMessagesAsync(id, name, description, connectionId, createdBy, updatedBy, deletedBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create schema profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// </param>
            public static object CreateSchemaProfile(this IMetabaseAPI10 operations, SchemaProfile input)
            {
                return operations.CreateSchemaProfileAsync(input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create schema profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateSchemaProfileAsync(this IMetabaseAPI10 operations, SchemaProfile input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSchemaProfileWithHttpMessagesAsync(input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get one schema profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static SchemaProfile GetOneSchemaProfile(this IMetabaseAPI10 operations, string id, int? version = default(int?))
            {
                return operations.GetOneSchemaProfileAsync(id, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get one schema profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SchemaProfile> GetOneSchemaProfileAsync(this IMetabaseAPI10 operations, string id, int? version = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOneSchemaProfileWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update schema profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object UpdateSchemaProfile(this IMetabaseAPI10 operations, string id, SchemaProfile model)
            {
                return operations.UpdateSchemaProfileAsync(id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update schema profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateSchemaProfileAsync(this IMetabaseAPI10 operations, string id, SchemaProfile model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSchemaProfileWithHttpMessagesAsync(id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete schema profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteSchemaProfile(this IMetabaseAPI10 operations, string id)
            {
                operations.DeleteSchemaProfileAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete schema profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSchemaProfileAsync(this IMetabaseAPI10 operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSchemaProfileWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get schema profile versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<SchemaProfile> GetSchemaProfileVersions(this IMetabaseAPI10 operations, string id)
            {
                return operations.GetSchemaProfileVersionsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get schema profile versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SchemaProfile>> GetSchemaProfileVersionsAsync(this IMetabaseAPI10 operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchemaProfileVersionsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all schemas.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='discoveredId'>
            /// </param>
            /// <param name='discoveredName'>
            /// </param>
            /// <param name='discoveredDescription'>
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='connectionId'>
            /// </param>
            /// <param name='profilingJobId'>
            /// </param>
            /// <param name='publisherMetaJson'>
            /// </param>
            /// <param name='capability'>
            /// </param>
            /// <param name='createdBy'>
            /// </param>
            /// <param name='updatedBy'>
            /// </param>
            /// <param name='deletedBy'>
            /// </param>
            public static IList<Schema> GetAllSchemas(this IMetabaseAPI10 operations, string id = default(string), string name = default(string), string description = default(string), string discoveredId = default(string), string discoveredName = default(string), string discoveredDescription = default(string), string query = default(string), string connectionId = default(string), string profilingJobId = default(string), string publisherMetaJson = default(string), string capability = default(string), string createdBy = default(string), string updatedBy = default(string), string deletedBy = default(string))
            {
                return operations.GetAllSchemasAsync(id, name, description, discoveredId, discoveredName, discoveredDescription, query, connectionId, profilingJobId, publisherMetaJson, capability, createdBy, updatedBy, deletedBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all schemas.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='discoveredId'>
            /// </param>
            /// <param name='discoveredName'>
            /// </param>
            /// <param name='discoveredDescription'>
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='connectionId'>
            /// </param>
            /// <param name='profilingJobId'>
            /// </param>
            /// <param name='publisherMetaJson'>
            /// </param>
            /// <param name='capability'>
            /// </param>
            /// <param name='createdBy'>
            /// </param>
            /// <param name='updatedBy'>
            /// </param>
            /// <param name='deletedBy'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Schema>> GetAllSchemasAsync(this IMetabaseAPI10 operations, string id = default(string), string name = default(string), string description = default(string), string discoveredId = default(string), string discoveredName = default(string), string discoveredDescription = default(string), string query = default(string), string connectionId = default(string), string profilingJobId = default(string), string publisherMetaJson = default(string), string capability = default(string), string createdBy = default(string), string updatedBy = default(string), string deletedBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllSchemasWithHttpMessagesAsync(id, name, description, discoveredId, discoveredName, discoveredDescription, query, connectionId, profilingJobId, publisherMetaJson, capability, createdBy, updatedBy, deletedBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create schema.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// </param>
            public static object CreateSchema(this IMetabaseAPI10 operations, Schema input)
            {
                return operations.CreateSchemaAsync(input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create schema.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateSchemaAsync(this IMetabaseAPI10 operations, Schema input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSchemaWithHttpMessagesAsync(input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get one schema.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static Schema GetOneSchema(this IMetabaseAPI10 operations, string id, int? version = default(int?))
            {
                return operations.GetOneSchemaAsync(id, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get one schema.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Schema> GetOneSchemaAsync(this IMetabaseAPI10 operations, string id, int? version = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOneSchemaWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update schema.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object UpdateSchema(this IMetabaseAPI10 operations, string id, Schema model)
            {
                return operations.UpdateSchemaAsync(id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update schema.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateSchemaAsync(this IMetabaseAPI10 operations, string id, Schema model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSchemaWithHttpMessagesAsync(id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete schema.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteSchema(this IMetabaseAPI10 operations, string id)
            {
                operations.DeleteSchemaAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete schema.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSchemaAsync(this IMetabaseAPI10 operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSchemaWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get schema versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<Schema> GetSchemaVersions(this IMetabaseAPI10 operations, string id)
            {
                return operations.GetSchemaVersionsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get schema versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Schema>> GetSchemaVersionsAsync(this IMetabaseAPI10 operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchemaVersionsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all shapes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='copiedFromSchemaId'>
            /// </param>
            /// <param name='createdBy'>
            /// </param>
            /// <param name='updatedBy'>
            /// </param>
            /// <param name='deletedBy'>
            /// </param>
            public static IList<Shape> GetAllShapes(this IMetabaseAPI10 operations, string id = default(string), string name = default(string), string description = default(string), string copiedFromSchemaId = default(string), string createdBy = default(string), string updatedBy = default(string), string deletedBy = default(string))
            {
                return operations.GetAllShapesAsync(id, name, description, copiedFromSchemaId, createdBy, updatedBy, deletedBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all shapes.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='copiedFromSchemaId'>
            /// </param>
            /// <param name='createdBy'>
            /// </param>
            /// <param name='updatedBy'>
            /// </param>
            /// <param name='deletedBy'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Shape>> GetAllShapesAsync(this IMetabaseAPI10 operations, string id = default(string), string name = default(string), string description = default(string), string copiedFromSchemaId = default(string), string createdBy = default(string), string updatedBy = default(string), string deletedBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllShapesWithHttpMessagesAsync(id, name, description, copiedFromSchemaId, createdBy, updatedBy, deletedBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create shape.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// </param>
            public static object CreateShape(this IMetabaseAPI10 operations, Shape input)
            {
                return operations.CreateShapeAsync(input).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create shape.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='input'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateShapeAsync(this IMetabaseAPI10 operations, Shape input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateShapeWithHttpMessagesAsync(input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get one shape.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            public static Shape GetOneShape(this IMetabaseAPI10 operations, string id, int? version = default(int?))
            {
                return operations.GetOneShapeAsync(id, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get one shape.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Shape> GetOneShapeAsync(this IMetabaseAPI10 operations, string id, int? version = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOneShapeWithHttpMessagesAsync(id, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update shape.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object UpdateShape(this IMetabaseAPI10 operations, string id, Shape model)
            {
                return operations.UpdateShapeAsync(id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update shape.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateShapeAsync(this IMetabaseAPI10 operations, string id, Shape model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateShapeWithHttpMessagesAsync(id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete shape.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteShape(this IMetabaseAPI10 operations, string id)
            {
                operations.DeleteShapeAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete shape.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteShapeAsync(this IMetabaseAPI10 operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteShapeWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get shape versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<Shape> GetShapeVersions(this IMetabaseAPI10 operations, string id)
            {
                return operations.GetShapeVersionsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get shape versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Shape>> GetShapeVersionsAsync(this IMetabaseAPI10 operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShapeVersionsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
