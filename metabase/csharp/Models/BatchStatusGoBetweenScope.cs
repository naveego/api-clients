// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Naveego.Metabase.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class BatchStatusGoBetweenScope
    {
        /// <summary>
        /// Initializes a new instance of the BatchStatusGoBetweenScope class.
        /// </summary>
        public BatchStatusGoBetweenScope()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BatchStatusGoBetweenScope class.
        /// </summary>
        public BatchStatusGoBetweenScope(string resourceId = default(string), System.DateTime? updatedAt = default(System.DateTime?), string updatedBy = default(string), string startedOnAgent = default(string), System.DateTime? startedAt = default(System.DateTime?), System.DateTime? expectedToEndBefore = default(System.DateTime?), System.DateTime? endedAt = default(System.DateTime?), int? expectedCount = default(int?), double? dataPointsPerMinute = default(double?), int? count = default(int?), int? filteredCount = default(int?), int? deflectedCount = default(int?), int? badRecordCount = default(int?), string endedReason = default(string), string endedMessage = default(string), IList<IDictionary<string, object>> badRecordSample = default(IList<IDictionary<string, object>>))
        {
            ResourceId = resourceId;
            UpdatedAt = updatedAt;
            UpdatedBy = updatedBy;
            StartedOnAgent = startedOnAgent;
            StartedAt = startedAt;
            ExpectedToEndBefore = expectedToEndBefore;
            EndedAt = endedAt;
            ExpectedCount = expectedCount;
            DataPointsPerMinute = dataPointsPerMinute;
            Count = count;
            FilteredCount = filteredCount;
            DeflectedCount = deflectedCount;
            BadRecordCount = badRecordCount;
            EndedReason = endedReason;
            EndedMessage = endedMessage;
            BadRecordSample = badRecordSample;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "updatedAt")]
        public System.DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "updatedBy")]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startedOnAgent")]
        public string StartedOnAgent { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startedAt")]
        public System.DateTime? StartedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "expectedToEndBefore")]
        public System.DateTime? ExpectedToEndBefore { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endedAt")]
        public System.DateTime? EndedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "expectedCount")]
        public int? ExpectedCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dataPointsPerMinute")]
        public double? DataPointsPerMinute { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "filteredCount")]
        public int? FilteredCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deflectedCount")]
        public int? DeflectedCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "badRecordCount")]
        public int? BadRecordCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endedReason")]
        public string EndedReason { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endedMessage")]
        public string EndedMessage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "badRecordSample")]
        public IList<IDictionary<string, object>> BadRecordSample { get; set; }

    }
}
