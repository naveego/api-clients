// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Naveego.Metabase.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DataflowEvent
    {
        /// <summary>
        /// Initializes a new instance of the DataflowEvent class.
        /// </summary>
        public DataflowEvent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataflowEvent class.
        /// </summary>
        public DataflowEvent(string id, string tid, string rid, string cid, Payload d = default(Payload), string sid = default(string), string jid = default(string), string bid = default(string), IList<string> rids = default(IList<string>), IDictionary<string, object> m = default(IDictionary<string, object>), IList<Trace> trc = default(IList<Trace>))
        {
            D = d;
            Id = id;
            Tid = tid;
            Sid = sid;
            Jid = jid;
            Bid = bid;
            Rid = rid;
            Rids = rids;
            Cid = cid;
            M = m;
            Trc = trc;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "d")]
        public Payload D { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tid")]
        public string Tid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sid")]
        public string Sid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jid")]
        public string Jid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bid")]
        public string Bid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rid")]
        public string Rid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "rids")]
        public IList<string> Rids { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cid")]
        public string Cid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "m")]
        public IDictionary<string, object> M { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trc")]
        public IList<Trace> Trc { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Tid == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Tid");
            }
            if (Rid == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Rid");
            }
            if (Cid == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Cid");
            }
            if (Id != null)
            {
                if (Id.Length > 2147483647)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Id", 2147483647);
                }
                if (Id.Length < 20)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Id", 20);
                }
            }
        }
    }
}
