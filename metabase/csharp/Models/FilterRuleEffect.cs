// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Naveego.Metabase.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for FilterRuleEffect.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(FilterRuleEffectConverter))]
    public struct FilterRuleEffect : System.IEquatable<FilterRuleEffect>
    {
        private FilterRuleEffect(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly FilterRuleEffect Include = "include";

        public static readonly FilterRuleEffect Exclude = "exclude";


        /// <summary>
        /// Underlying value of enum FilterRuleEffect
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for FilterRuleEffect
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type FilterRuleEffect
        /// </summary>
        public bool Equals(FilterRuleEffect e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to FilterRuleEffect
        /// </summary>
        public static implicit operator FilterRuleEffect(string value)
        {
            return new FilterRuleEffect(value);
        }

        /// <summary>
        /// Implicit operator to convert FilterRuleEffect to string
        /// </summary>
        public static implicit operator string(FilterRuleEffect e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum FilterRuleEffect
        /// </summary>
        public static bool operator == (FilterRuleEffect e1, FilterRuleEffect e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum FilterRuleEffect
        /// </summary>
        public static bool operator != (FilterRuleEffect e1, FilterRuleEffect e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for FilterRuleEffect
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is FilterRuleEffect && Equals((FilterRuleEffect)obj);
        }

        /// <summary>
        /// Returns for hashCode FilterRuleEffect
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
