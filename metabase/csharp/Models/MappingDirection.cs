// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Naveego.Metabase.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for MappingDirection.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(MappingDirectionConverter))]
    public struct MappingDirection : System.IEquatable<MappingDirection>
    {
        private MappingDirection(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly MappingDirection SchemaToShape = "schemaToShape";

        public static readonly MappingDirection ShapeToSchema = "shapeToSchema";


        /// <summary>
        /// Underlying value of enum MappingDirection
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for MappingDirection
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type MappingDirection
        /// </summary>
        public bool Equals(MappingDirection e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to MappingDirection
        /// </summary>
        public static implicit operator MappingDirection(string value)
        {
            return new MappingDirection(value);
        }

        /// <summary>
        /// Implicit operator to convert MappingDirection to string
        /// </summary>
        public static implicit operator string(MappingDirection e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum MappingDirection
        /// </summary>
        public static bool operator == (MappingDirection e1, MappingDirection e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum MappingDirection
        /// </summary>
        public static bool operator != (MappingDirection e1, MappingDirection e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for MappingDirection
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is MappingDirection && Equals((MappingDirection)obj);
        }

        /// <summary>
        /// Returns for hashCode MappingDirection
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
