// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Naveego.Metabase.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class MatchRule
    {
        /// <summary>
        /// Initializes a new instance of the MatchRule class.
        /// </summary>
        public MatchRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MatchRule class.
        /// </summary>
        public MatchRule(string shapeId, string type, int? version = default(int?), double? mcl = default(double?), IDictionary<string, object> settings = default(IDictionary<string, object>))
        {
            ShapeId = shapeId;
            Version = version;
            Mcl = mcl;
            Type = type;
            Settings = settings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shapeId")]
        public string ShapeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public int? Version { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mcl")]
        public double? Mcl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "settings")]
        public IDictionary<string, object> Settings { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ShapeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ShapeId");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
