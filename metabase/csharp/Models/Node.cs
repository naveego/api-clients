// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Naveego.Metabase.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Node
    {
        /// <summary>
        /// Initializes a new instance of the Node class.
        /// </summary>
        public Node()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Node class.
        /// </summary>
        /// <param name="type">Possible values include: 'unknown', 'publish',
        /// 'map', 'injest', 'enrich', 'match', 'merge', 'terminal'</param>
        public Node(string id, string name = default(string), NodeType? type = default(NodeType?), PublishNode publish = default(PublishNode), MapNode map = default(MapNode), object injest = default(object), object match = default(object), object merge = default(object), object terminal = default(object))
        {
            Id = id;
            Name = name;
            Type = type;
            Publish = publish;
            Map = map;
            Injest = injest;
            Match = match;
            Merge = merge;
            Terminal = terminal;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'unknown', 'publish', 'map',
        /// 'injest', 'enrich', 'match', 'merge', 'terminal'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public NodeType? Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "publish")]
        public PublishNode Publish { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "map")]
        public MapNode Map { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "injest")]
        public object Injest { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "match")]
        public object Match { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "merge")]
        public object Merge { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "terminal")]
        public object Terminal { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
        }
    }
}
