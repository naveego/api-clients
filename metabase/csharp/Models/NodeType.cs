// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Naveego.Metabase.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for NodeType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(NodeTypeConverter))]
    public struct NodeType : System.IEquatable<NodeType>
    {
        private NodeType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly NodeType Unknown = "unknown";

        public static readonly NodeType Publish = "publish";

        public static readonly NodeType Map = "map";

        public static readonly NodeType Injest = "injest";

        public static readonly NodeType Enrich = "enrich";

        public static readonly NodeType Match = "match";

        public static readonly NodeType Merge = "merge";

        public static readonly NodeType Terminal = "terminal";


        /// <summary>
        /// Underlying value of enum NodeType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for NodeType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type NodeType
        /// </summary>
        public bool Equals(NodeType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to NodeType
        /// </summary>
        public static implicit operator NodeType(string value)
        {
            return new NodeType(value);
        }

        /// <summary>
        /// Implicit operator to convert NodeType to string
        /// </summary>
        public static implicit operator string(NodeType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum NodeType
        /// </summary>
        public static bool operator == (NodeType e1, NodeType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum NodeType
        /// </summary>
        public static bool operator != (NodeType e1, NodeType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for NodeType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is NodeType && Equals((NodeType)obj);
        }

        /// <summary>
        /// Returns for hashCode NodeType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
