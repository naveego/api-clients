// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Naveego.Metabase.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class PropertyMapping
    {
        /// <summary>
        /// Initializes a new instance of the PropertyMapping class.
        /// </summary>
        public PropertyMapping()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PropertyMapping class.
        /// </summary>
        /// <param name="fromPropertyMeaning">Possible values include:
        /// 'primaryDataPropertyId', 'schemaDataPropertyId',
        /// 'enrichedDataPropertyId'</param>
        /// <param name="toPropertyMeaning">Possible values include:
        /// 'primaryDataPropertyId', 'schemaDataPropertyId',
        /// 'enrichedDataPropertyId'</param>
        public PropertyMapping(string fromPropertyId, string toPropertyId, PropertyIdMeaning? fromPropertyMeaning = default(PropertyIdMeaning?), PropertyIdMeaning? toPropertyMeaning = default(PropertyIdMeaning?), Transform transform = default(Transform), IList<Transform> transforms = default(IList<Transform>))
        {
            FromPropertyId = fromPropertyId;
            ToPropertyId = toPropertyId;
            FromPropertyMeaning = fromPropertyMeaning;
            ToPropertyMeaning = toPropertyMeaning;
            Transform = transform;
            Transforms = transforms;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fromPropertyId")]
        public string FromPropertyId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "toPropertyId")]
        public string ToPropertyId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'primaryDataPropertyId',
        /// 'schemaDataPropertyId', 'enrichedDataPropertyId'
        /// </summary>
        [JsonProperty(PropertyName = "fromPropertyMeaning")]
        public PropertyIdMeaning? FromPropertyMeaning { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'primaryDataPropertyId',
        /// 'schemaDataPropertyId', 'enrichedDataPropertyId'
        /// </summary>
        [JsonProperty(PropertyName = "toPropertyMeaning")]
        public PropertyIdMeaning? ToPropertyMeaning { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transform")]
        public Transform Transform { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transforms")]
        public IList<Transform> Transforms { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FromPropertyId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FromPropertyId");
            }
            if (ToPropertyId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ToPropertyId");
            }
        }
    }
}
