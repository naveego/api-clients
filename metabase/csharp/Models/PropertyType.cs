// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Naveego.Metabase.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for PropertyType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(PropertyTypeConverter))]
    public struct PropertyType : System.IEquatable<PropertyType>
    {
        private PropertyType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly PropertyType String = "string";

        public static readonly PropertyType Bool = "bool";

        public static readonly PropertyType Integer = "integer";

        public static readonly PropertyType Float = "float";

        public static readonly PropertyType Decimal = "decimal";

        public static readonly PropertyType Date = "date";

        public static readonly PropertyType Time = "time";

        public static readonly PropertyType Datetime = "datetime";

        public static readonly PropertyType Text = "text";

        public static readonly PropertyType Blob = "blob";

        public static readonly PropertyType Json = "json";


        /// <summary>
        /// Underlying value of enum PropertyType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for PropertyType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type PropertyType
        /// </summary>
        public bool Equals(PropertyType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to PropertyType
        /// </summary>
        public static implicit operator PropertyType(string value)
        {
            return new PropertyType(value);
        }

        /// <summary>
        /// Implicit operator to convert PropertyType to string
        /// </summary>
        public static implicit operator string(PropertyType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum PropertyType
        /// </summary>
        public static bool operator == (PropertyType e1, PropertyType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum PropertyType
        /// </summary>
        public static bool operator != (PropertyType e1, PropertyType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for PropertyType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is PropertyType && Equals((PropertyType)obj);
        }

        /// <summary>
        /// Returns for hashCode PropertyType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
