/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { MetabaseApiContext } from "./metabaseApiContext";
var MetabaseApi = /** @class */ (function (_super) {
    tslib_1.__extends(MetabaseApi, _super);
    /**
     * Initializes a new instance of the MetabaseApi class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    function MetabaseApi(credentials, options) {
        return _super.call(this, credentials, options) || this;
    }
    MetabaseApi.prototype.setBatchStatusForGoBetweenBatch = function (id, status, options, callback) {
        return this.sendOperationRequest({
            id: id,
            status: status,
            options: options
        }, setBatchStatusForGoBetweenBatchOperationSpec, callback);
    };
    MetabaseApi.prototype.getPagedStatusesForBatch = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getPagedStatusesForBatchOperationSpec, callback);
    };
    MetabaseApi.prototype.eventsPlaceholderForBatch = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, eventsPlaceholderForBatchOperationSpec, callback);
    };
    MetabaseApi.prototype.getAllBatches = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getAllBatchesOperationSpec, callback);
    };
    MetabaseApi.prototype.createBatch = function (input, options, callback) {
        return this.sendOperationRequest({
            input: input,
            options: options
        }, createBatchOperationSpec, callback);
    };
    MetabaseApi.prototype.getOneBatch = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getOneBatchOperationSpec, callback);
    };
    MetabaseApi.prototype.updateBatch = function (id, model, options, callback) {
        return this.sendOperationRequest({
            id: id,
            model: model,
            options: options
        }, updateBatchOperationSpec, callback);
    };
    MetabaseApi.prototype.deleteBatch = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, deleteBatchOperationSpec, callback);
    };
    MetabaseApi.prototype.getBatchVersions = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getBatchVersionsOperationSpec, callback);
    };
    MetabaseApi.prototype.getAllConnections = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getAllConnectionsOperationSpec, callback);
    };
    MetabaseApi.prototype.createConnection = function (input, options, callback) {
        return this.sendOperationRequest({
            input: input,
            options: options
        }, createConnectionOperationSpec, callback);
    };
    MetabaseApi.prototype.getOneConnection = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getOneConnectionOperationSpec, callback);
    };
    MetabaseApi.prototype.updateConnection = function (id, model, options, callback) {
        return this.sendOperationRequest({
            id: id,
            model: model,
            options: options
        }, updateConnectionOperationSpec, callback);
    };
    MetabaseApi.prototype.deleteConnection = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, deleteConnectionOperationSpec, callback);
    };
    MetabaseApi.prototype.getConnectionVersions = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getConnectionVersionsOperationSpec, callback);
    };
    MetabaseApi.prototype.getAllFlows = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getAllFlowsOperationSpec, callback);
    };
    MetabaseApi.prototype.createFlow = function (input, options, callback) {
        return this.sendOperationRequest({
            input: input,
            options: options
        }, createFlowOperationSpec, callback);
    };
    MetabaseApi.prototype.getOneFlow = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getOneFlowOperationSpec, callback);
    };
    MetabaseApi.prototype.updateFlow = function (id, model, options, callback) {
        return this.sendOperationRequest({
            id: id,
            model: model,
            options: options
        }, updateFlowOperationSpec, callback);
    };
    MetabaseApi.prototype.deleteFlow = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, deleteFlowOperationSpec, callback);
    };
    MetabaseApi.prototype.getFlowVersions = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getFlowVersionsOperationSpec, callback);
    };
    MetabaseApi.prototype.getJobMapping = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getJobMappingOperationSpec, callback);
    };
    MetabaseApi.prototype.setJobStatusForGoBetween = function (id, status, options, callback) {
        return this.sendOperationRequest({
            id: id,
            status: status,
            options: options
        }, setJobStatusForGoBetweenOperationSpec, callback);
    };
    MetabaseApi.prototype.setRealTimeState = function (id, state, options, callback) {
        return this.sendOperationRequest({
            id: id,
            state: state,
            options: options
        }, setRealTimeStateOperationSpec, callback);
    };
    MetabaseApi.prototype.getAllJobs = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getAllJobsOperationSpec, callback);
    };
    MetabaseApi.prototype.createJob = function (input, options, callback) {
        return this.sendOperationRequest({
            input: input,
            options: options
        }, createJobOperationSpec, callback);
    };
    MetabaseApi.prototype.getPagedStatusesForJob = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getPagedStatusesForJobOperationSpec, callback);
    };
    MetabaseApi.prototype.eventsPlaceholderForJob = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, eventsPlaceholderForJobOperationSpec, callback);
    };
    MetabaseApi.prototype.getOneJob = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getOneJobOperationSpec, callback);
    };
    MetabaseApi.prototype.updateJob = function (id, model, options, callback) {
        return this.sendOperationRequest({
            id: id,
            model: model,
            options: options
        }, updateJobOperationSpec, callback);
    };
    MetabaseApi.prototype.deleteJob = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, deleteJobOperationSpec, callback);
    };
    MetabaseApi.prototype.getJobVersions = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getJobVersionsOperationSpec, callback);
    };
    MetabaseApi.prototype.getAllSchemaProfiles = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getAllSchemaProfilesOperationSpec, callback);
    };
    MetabaseApi.prototype.createSchemaProfile = function (input, options, callback) {
        return this.sendOperationRequest({
            input: input,
            options: options
        }, createSchemaProfileOperationSpec, callback);
    };
    MetabaseApi.prototype.getOneSchemaProfile = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getOneSchemaProfileOperationSpec, callback);
    };
    MetabaseApi.prototype.updateSchemaProfile = function (id, model, options, callback) {
        return this.sendOperationRequest({
            id: id,
            model: model,
            options: options
        }, updateSchemaProfileOperationSpec, callback);
    };
    MetabaseApi.prototype.deleteSchemaProfile = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, deleteSchemaProfileOperationSpec, callback);
    };
    MetabaseApi.prototype.getSchemaProfileVersions = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getSchemaProfileVersionsOperationSpec, callback);
    };
    MetabaseApi.prototype.getAllSchemas = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getAllSchemasOperationSpec, callback);
    };
    MetabaseApi.prototype.createSchema = function (input, options, callback) {
        return this.sendOperationRequest({
            input: input,
            options: options
        }, createSchemaOperationSpec, callback);
    };
    MetabaseApi.prototype.getOneSchema = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getOneSchemaOperationSpec, callback);
    };
    MetabaseApi.prototype.updateSchema = function (id, model, options, callback) {
        return this.sendOperationRequest({
            id: id,
            model: model,
            options: options
        }, updateSchemaOperationSpec, callback);
    };
    MetabaseApi.prototype.deleteSchema = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, deleteSchemaOperationSpec, callback);
    };
    MetabaseApi.prototype.getSchemaVersions = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getSchemaVersionsOperationSpec, callback);
    };
    MetabaseApi.prototype.getAllShapes = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getAllShapesOperationSpec, callback);
    };
    MetabaseApi.prototype.createShape = function (input, options, callback) {
        return this.sendOperationRequest({
            input: input,
            options: options
        }, createShapeOperationSpec, callback);
    };
    MetabaseApi.prototype.getOneShape = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getOneShapeOperationSpec, callback);
    };
    MetabaseApi.prototype.updateShape = function (id, model, options, callback) {
        return this.sendOperationRequest({
            id: id,
            model: model,
            options: options
        }, updateShapeOperationSpec, callback);
    };
    MetabaseApi.prototype.deleteShape = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, deleteShapeOperationSpec, callback);
    };
    MetabaseApi.prototype.getShapeVersions = function (id, options, callback) {
        return this.sendOperationRequest({
            id: id,
            options: options
        }, getShapeVersionsOperationSpec, callback);
    };
    return MetabaseApi;
}(MetabaseApiContext));
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var setBatchStatusForGoBetweenBatchOperationSpec = {
    httpMethod: "PUT",
    path: "v1/batches/{id}/status/go-between-agent",
    urlParameters: [
        Parameters.id0
    ],
    requestBody: {
        parameterPath: "status",
        mapper: tslib_1.__assign({}, Mappers.BatchStatusGoBetweenScope, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        202: {},
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getPagedStatusesForBatchOperationSpec = {
    httpMethod: "GET",
    path: "v1/batches/{id}/status",
    urlParameters: [
        Parameters.id0
    ],
    queryParameters: [
        Parameters.page,
        Parameters.pageSize
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PagedResultOfBatchStatus
        },
        default: {}
    },
    serializer: serializer
};
var eventsPlaceholderForBatchOperationSpec = {
    httpMethod: "GET",
    path: "v1/batches/events",
    responses: {
        200: {
            bodyMapper: Mappers.DataflowEvent
        },
        default: {}
    },
    serializer: serializer
};
var getAllBatchesOperationSpec = {
    httpMethod: "GET",
    path: "v1/batches",
    queryParameters: [
        Parameters.id1,
        Parameters.name,
        Parameters.description,
        Parameters.jobId,
        Parameters.createdBy,
        Parameters.updatedBy,
        Parameters.deletedBy
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Batch"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createBatchOperationSpec = {
    httpMethod: "POST",
    path: "v1/batches",
    requestBody: {
        parameterPath: "input",
        mapper: tslib_1.__assign({}, Mappers.Batch, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        201: {
            bodyMapper: Mappers.Batch
        },
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getOneBatchOperationSpec = {
    httpMethod: "GET",
    path: "v1/batches/{id}",
    urlParameters: [
        Parameters.id0
    ],
    queryParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Batch
        },
        default: {}
    },
    serializer: serializer
};
var updateBatchOperationSpec = {
    httpMethod: "PUT",
    path: "v1/batches/{id}",
    urlParameters: [
        Parameters.id0
    ],
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.Batch, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        202: {
            bodyMapper: Mappers.Batch
        },
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        404: {},
        409: {
            bodyMapper: Mappers.Batch
        },
        default: {}
    },
    serializer: serializer
};
var deleteBatchOperationSpec = {
    httpMethod: "DELETE",
    path: "v1/batches/{id}",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var getBatchVersionsOperationSpec = {
    httpMethod: "GET",
    path: "v1/batches/{id}/versions",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Batch"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getAllConnectionsOperationSpec = {
    httpMethod: "GET",
    path: "v1/connections",
    queryParameters: [
        Parameters.id1,
        Parameters.name,
        Parameters.description,
        Parameters.plugin,
        Parameters.preferredAgent,
        Parameters.createdBy,
        Parameters.updatedBy,
        Parameters.deletedBy
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Connection"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createConnectionOperationSpec = {
    httpMethod: "POST",
    path: "v1/connections",
    requestBody: {
        parameterPath: "input",
        mapper: tslib_1.__assign({}, Mappers.Connection, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        201: {
            bodyMapper: Mappers.Connection
        },
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getOneConnectionOperationSpec = {
    httpMethod: "GET",
    path: "v1/connections/{id}",
    urlParameters: [
        Parameters.id0
    ],
    queryParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Connection
        },
        default: {}
    },
    serializer: serializer
};
var updateConnectionOperationSpec = {
    httpMethod: "PUT",
    path: "v1/connections/{id}",
    urlParameters: [
        Parameters.id0
    ],
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.Connection, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        202: {
            bodyMapper: Mappers.Connection
        },
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        404: {},
        409: {
            bodyMapper: Mappers.Connection
        },
        default: {}
    },
    serializer: serializer
};
var deleteConnectionOperationSpec = {
    httpMethod: "DELETE",
    path: "v1/connections/{id}",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var getConnectionVersionsOperationSpec = {
    httpMethod: "GET",
    path: "v1/connections/{id}/versions",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Connection"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getAllFlowsOperationSpec = {
    httpMethod: "GET",
    path: "v1/flows",
    queryParameters: [
        Parameters.id1,
        Parameters.name,
        Parameters.description,
        Parameters.createdBy,
        Parameters.updatedBy,
        Parameters.deletedBy
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Flow"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createFlowOperationSpec = {
    httpMethod: "POST",
    path: "v1/flows",
    requestBody: {
        parameterPath: "input",
        mapper: tslib_1.__assign({}, Mappers.Flow, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        201: {
            bodyMapper: Mappers.Flow
        },
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getOneFlowOperationSpec = {
    httpMethod: "GET",
    path: "v1/flows/{id}",
    urlParameters: [
        Parameters.id0
    ],
    queryParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Flow
        },
        default: {}
    },
    serializer: serializer
};
var updateFlowOperationSpec = {
    httpMethod: "PUT",
    path: "v1/flows/{id}",
    urlParameters: [
        Parameters.id0
    ],
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.Flow, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        202: {
            bodyMapper: Mappers.Flow
        },
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        404: {},
        409: {
            bodyMapper: Mappers.Flow
        },
        default: {}
    },
    serializer: serializer
};
var deleteFlowOperationSpec = {
    httpMethod: "DELETE",
    path: "v1/flows/{id}",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var getFlowVersionsOperationSpec = {
    httpMethod: "GET",
    path: "v1/flows/{id}/versions",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Flow"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getJobMappingOperationSpec = {
    httpMethod: "GET",
    path: "v1/jobs/{id}/mapping",
    urlParameters: [
        Parameters.id0
    ],
    queryParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Mapping
        },
        default: {}
    },
    serializer: serializer
};
var setJobStatusForGoBetweenOperationSpec = {
    httpMethod: "PUT",
    path: "v1/jobs/{id}/status/go-between",
    urlParameters: [
        Parameters.id0
    ],
    requestBody: {
        parameterPath: "status",
        mapper: tslib_1.__assign({}, Mappers.JobStatusGoBetweenScope, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        202: {},
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var setRealTimeStateOperationSpec = {
    httpMethod: "PUT",
    path: "v1/jobs/{id}/status/realtime",
    urlParameters: [
        Parameters.id0
    ],
    requestBody: {
        parameterPath: "state",
        mapper: tslib_1.__assign({}, Mappers.RealTimeStateScope, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        202: {},
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getAllJobsOperationSpec = {
    httpMethod: "GET",
    path: "v1/jobs",
    queryParameters: [
        Parameters.id1,
        Parameters.name,
        Parameters.description,
        Parameters.connectionId,
        Parameters.schemaId,
        Parameters.shapeId,
        Parameters.agentId,
        Parameters.type,
        Parameters.createdBy,
        Parameters.updatedBy,
        Parameters.deletedBy
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Job"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createJobOperationSpec = {
    httpMethod: "POST",
    path: "v1/jobs",
    requestBody: {
        parameterPath: "input",
        mapper: tslib_1.__assign({}, Mappers.Job, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        201: {
            bodyMapper: Mappers.Job
        },
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getPagedStatusesForJobOperationSpec = {
    httpMethod: "GET",
    path: "v1/jobs/{id}/status",
    urlParameters: [
        Parameters.id0
    ],
    queryParameters: [
        Parameters.page,
        Parameters.pageSize
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PagedResultOfJobStatus
        },
        default: {}
    },
    serializer: serializer
};
var eventsPlaceholderForJobOperationSpec = {
    httpMethod: "GET",
    path: "v1/jobs/events",
    responses: {
        200: {
            bodyMapper: Mappers.DataflowEvent
        },
        default: {}
    },
    serializer: serializer
};
var getOneJobOperationSpec = {
    httpMethod: "GET",
    path: "v1/jobs/{id}",
    urlParameters: [
        Parameters.id0
    ],
    queryParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Job
        },
        default: {}
    },
    serializer: serializer
};
var updateJobOperationSpec = {
    httpMethod: "PUT",
    path: "v1/jobs/{id}",
    urlParameters: [
        Parameters.id0
    ],
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.Job, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        202: {
            bodyMapper: Mappers.Job
        },
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        404: {},
        409: {
            bodyMapper: Mappers.Job
        },
        default: {}
    },
    serializer: serializer
};
var deleteJobOperationSpec = {
    httpMethod: "DELETE",
    path: "v1/jobs/{id}",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var getJobVersionsOperationSpec = {
    httpMethod: "GET",
    path: "v1/jobs/{id}/versions",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Job"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getAllSchemaProfilesOperationSpec = {
    httpMethod: "GET",
    path: "v1/schemaprofiles",
    queryParameters: [
        Parameters.id1,
        Parameters.name,
        Parameters.description,
        Parameters.connectionId,
        Parameters.createdBy,
        Parameters.updatedBy,
        Parameters.deletedBy
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SchemaProfile"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createSchemaProfileOperationSpec = {
    httpMethod: "POST",
    path: "v1/schemaprofiles",
    requestBody: {
        parameterPath: "input",
        mapper: tslib_1.__assign({}, Mappers.SchemaProfile, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        201: {
            bodyMapper: Mappers.SchemaProfile
        },
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getOneSchemaProfileOperationSpec = {
    httpMethod: "GET",
    path: "v1/schemaprofiles/{id}",
    urlParameters: [
        Parameters.id0
    ],
    queryParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SchemaProfile
        },
        default: {}
    },
    serializer: serializer
};
var updateSchemaProfileOperationSpec = {
    httpMethod: "PUT",
    path: "v1/schemaprofiles/{id}",
    urlParameters: [
        Parameters.id0
    ],
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.SchemaProfile, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        202: {
            bodyMapper: Mappers.SchemaProfile
        },
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        404: {},
        409: {
            bodyMapper: Mappers.SchemaProfile
        },
        default: {}
    },
    serializer: serializer
};
var deleteSchemaProfileOperationSpec = {
    httpMethod: "DELETE",
    path: "v1/schemaprofiles/{id}",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var getSchemaProfileVersionsOperationSpec = {
    httpMethod: "GET",
    path: "v1/schemaprofiles/{id}/versions",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SchemaProfile"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getAllSchemasOperationSpec = {
    httpMethod: "GET",
    path: "v1/schemas",
    queryParameters: [
        Parameters.id1,
        Parameters.name,
        Parameters.description,
        Parameters.discoveredId,
        Parameters.discoveredName,
        Parameters.discoveredDescription,
        Parameters.query,
        Parameters.connectionId,
        Parameters.profilingJobId,
        Parameters.publisherMetaJson,
        Parameters.capability,
        Parameters.createdBy,
        Parameters.updatedBy,
        Parameters.deletedBy
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Schema"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createSchemaOperationSpec = {
    httpMethod: "POST",
    path: "v1/schemas",
    requestBody: {
        parameterPath: "input",
        mapper: tslib_1.__assign({}, Mappers.Schema, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        201: {
            bodyMapper: Mappers.Schema
        },
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getOneSchemaOperationSpec = {
    httpMethod: "GET",
    path: "v1/schemas/{id}",
    urlParameters: [
        Parameters.id0
    ],
    queryParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Schema
        },
        default: {}
    },
    serializer: serializer
};
var updateSchemaOperationSpec = {
    httpMethod: "PUT",
    path: "v1/schemas/{id}",
    urlParameters: [
        Parameters.id0
    ],
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.Schema, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        202: {
            bodyMapper: Mappers.Schema
        },
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        404: {},
        409: {
            bodyMapper: Mappers.Schema
        },
        default: {}
    },
    serializer: serializer
};
var deleteSchemaOperationSpec = {
    httpMethod: "DELETE",
    path: "v1/schemas/{id}",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var getSchemaVersionsOperationSpec = {
    httpMethod: "GET",
    path: "v1/schemas/{id}/versions",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Schema"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getAllShapesOperationSpec = {
    httpMethod: "GET",
    path: "v1/shapes",
    queryParameters: [
        Parameters.id1,
        Parameters.name,
        Parameters.description,
        Parameters.copiedFromSchemaId,
        Parameters.createdBy,
        Parameters.updatedBy,
        Parameters.deletedBy
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Shape"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var createShapeOperationSpec = {
    httpMethod: "POST",
    path: "v1/shapes",
    requestBody: {
        parameterPath: "input",
        mapper: tslib_1.__assign({}, Mappers.Shape, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        201: {
            bodyMapper: Mappers.Shape
        },
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var getOneShapeOperationSpec = {
    httpMethod: "GET",
    path: "v1/shapes/{id}",
    urlParameters: [
        Parameters.id0
    ],
    queryParameters: [
        Parameters.version
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Shape
        },
        default: {}
    },
    serializer: serializer
};
var updateShapeOperationSpec = {
    httpMethod: "PUT",
    path: "v1/shapes/{id}",
    urlParameters: [
        Parameters.id0
    ],
    requestBody: {
        parameterPath: "model",
        mapper: tslib_1.__assign({}, Mappers.Shape, { required: true })
    },
    contentType: "application/json-patch+json; charset=utf-8",
    responses: {
        202: {
            bodyMapper: Mappers.Shape
        },
        400: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            }
        },
        404: {},
        409: {
            bodyMapper: Mappers.Shape
        },
        default: {}
    },
    serializer: serializer
};
var deleteShapeOperationSpec = {
    httpMethod: "DELETE",
    path: "v1/shapes/{id}",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {},
        default: {}
    },
    serializer: serializer
};
var getShapeVersionsOperationSpec = {
    httpMethod: "GET",
    path: "v1/shapes/{id}/versions",
    urlParameters: [
        Parameters.id0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Shape"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
export { MetabaseApi, MetabaseApiContext, Models as MetabaseApiModels, Mappers as MetabaseApiMappers };
//# sourceMappingURL=metabaseApi.js.map