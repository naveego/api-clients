/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { MetabaseApiContext } from "./metabaseApiContext";

class MetabaseApi extends MetabaseApiContext {
  /**
   * @class
   * Initializes a new instance of the MetabaseApi class.
   * @constructor
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
   * {@link https://github.github.io/fetch/#Request Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(credentials: msRest.ServiceClientCredentials, baseUri?: string, options?: msRest.ServiceClientOptions) {
    super(credentials, baseUri, options);
  }
  // methods on the client.

  /**
   * @summary Set batch status for go between batch.
   *
   * @param {string} id
   *
   * @param {BatchStatusGoBetweenScope} status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  setBatchStatusForGoBetweenBatchWithHttpOperationResponse(id: string, status: Models.BatchStatusGoBetweenScope, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<{ [propertyName: string]: string[] }>> {
    return this.sendOperationRequest(
      {
        id,
        status,
        options
      },
      setBatchStatusForGoBetweenBatchOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get paged statuses for batch.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetPagedStatusesForBatchOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getPagedStatusesForBatchWithHttpOperationResponse(id: string, options?: Models.MetabaseApiGetPagedStatusesForBatchOptionalParams): Promise<msRest.HttpOperationResponse<Models.PagedResultOfBatchStatus>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getPagedStatusesForBatchOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Events placeholder for batch.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  eventsPlaceholderForBatchWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.DataflowEvent>> {
    return this.sendOperationRequest(
      {
        options
      },
      eventsPlaceholderForBatchOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get all batches.
   *
   * @param {MetabaseApiGetAllBatchesOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllBatchesWithHttpOperationResponse(options?: Models.MetabaseApiGetAllBatchesOptionalParams): Promise<msRest.HttpOperationResponse<Models.Batch[]>> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllBatchesOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Create batch.
   *
   * @param {Batch} input
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createBatchWithHttpOperationResponse(input: Models.Batch, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.sendOperationRequest(
      {
        input,
        options
      },
      createBatchOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get one batch.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetOneBatchOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getOneBatchWithHttpOperationResponse(id: string, options?: Models.MetabaseApiGetOneBatchOptionalParams): Promise<msRest.HttpOperationResponse<Models.Batch>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getOneBatchOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Update batch.
   *
   * @param {string} id
   *
   * @param {Batch} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateBatchWithHttpOperationResponse(id: string, model: Models.Batch, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.sendOperationRequest(
      {
        id,
        model,
        options
      },
      updateBatchOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Delete batch.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteBatchWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteBatchOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get batch versions.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBatchVersionsWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Batch[]>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getBatchVersionsOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get all connections.
   *
   * @param {MetabaseApiGetAllConnectionsOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllConnectionsWithHttpOperationResponse(options?: Models.MetabaseApiGetAllConnectionsOptionalParams): Promise<msRest.HttpOperationResponse<Models.Connection[]>> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllConnectionsOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Create connection.
   *
   * @param {Connection} input
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createConnectionWithHttpOperationResponse(input: Models.Connection, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.sendOperationRequest(
      {
        input,
        options
      },
      createConnectionOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get one connection.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetOneConnectionOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getOneConnectionWithHttpOperationResponse(id: string, options?: Models.MetabaseApiGetOneConnectionOptionalParams): Promise<msRest.HttpOperationResponse<Models.Connection>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getOneConnectionOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Update connection.
   *
   * @param {string} id
   *
   * @param {Connection} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateConnectionWithHttpOperationResponse(id: string, model: Models.Connection, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.sendOperationRequest(
      {
        id,
        model,
        options
      },
      updateConnectionOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Delete connection.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteConnectionWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteConnectionOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get connection versions.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getConnectionVersionsWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Connection[]>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getConnectionVersionsOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get all flows.
   *
   * @param {MetabaseApiGetAllFlowsOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllFlowsWithHttpOperationResponse(options?: Models.MetabaseApiGetAllFlowsOptionalParams): Promise<msRest.HttpOperationResponse<Models.Flow[]>> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllFlowsOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Create flow.
   *
   * @param {Flow} input
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createFlowWithHttpOperationResponse(input: Models.Flow, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.sendOperationRequest(
      {
        input,
        options
      },
      createFlowOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get one flow.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetOneFlowOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getOneFlowWithHttpOperationResponse(id: string, options?: Models.MetabaseApiGetOneFlowOptionalParams): Promise<msRest.HttpOperationResponse<Models.Flow>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getOneFlowOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Update flow.
   *
   * @param {string} id
   *
   * @param {Flow} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateFlowWithHttpOperationResponse(id: string, model: Models.Flow, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.sendOperationRequest(
      {
        id,
        model,
        options
      },
      updateFlowOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Delete flow.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteFlowWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteFlowOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get flow versions.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getFlowVersionsWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Flow[]>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getFlowVersionsOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get job mapping.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetJobMappingOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getJobMappingWithHttpOperationResponse(id: string, options?: Models.MetabaseApiGetJobMappingOptionalParams): Promise<msRest.HttpOperationResponse<Models.Mapping>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getJobMappingOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Set job status for go between.
   *
   * @param {string} id
   *
   * @param {JobStatusGoBetweenScope} status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  setJobStatusForGoBetweenWithHttpOperationResponse(id: string, status: Models.JobStatusGoBetweenScope, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<{ [propertyName: string]: string[] }>> {
    return this.sendOperationRequest(
      {
        id,
        status,
        options
      },
      setJobStatusForGoBetweenOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Set real time state.
   *
   * @param {string} id
   *
   * @param {RealTimeStateScope} state
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  setRealTimeStateWithHttpOperationResponse(id: string, state: Models.RealTimeStateScope, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<{ [propertyName: string]: string[] }>> {
    return this.sendOperationRequest(
      {
        id,
        state,
        options
      },
      setRealTimeStateOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get all jobs.
   *
   * @param {MetabaseApiGetAllJobsOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllJobsWithHttpOperationResponse(options?: Models.MetabaseApiGetAllJobsOptionalParams): Promise<msRest.HttpOperationResponse<Models.Job[]>> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllJobsOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Create job.
   *
   * @param {Job} input
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createJobWithHttpOperationResponse(input: Models.Job, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.sendOperationRequest(
      {
        input,
        options
      },
      createJobOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get paged statuses for job.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetPagedStatusesForJobOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getPagedStatusesForJobWithHttpOperationResponse(id: string, options?: Models.MetabaseApiGetPagedStatusesForJobOptionalParams): Promise<msRest.HttpOperationResponse<Models.PagedResultOfJobStatus>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getPagedStatusesForJobOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Events placeholder for job.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  eventsPlaceholderForJobWithHttpOperationResponse(options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.DataflowEvent>> {
    return this.sendOperationRequest(
      {
        options
      },
      eventsPlaceholderForJobOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get one job.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetOneJobOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getOneJobWithHttpOperationResponse(id: string, options?: Models.MetabaseApiGetOneJobOptionalParams): Promise<msRest.HttpOperationResponse<Models.Job>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getOneJobOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Update job.
   *
   * @param {string} id
   *
   * @param {Job} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateJobWithHttpOperationResponse(id: string, model: Models.Job, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.sendOperationRequest(
      {
        id,
        model,
        options
      },
      updateJobOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Delete job.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteJobWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteJobOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get job versions.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getJobVersionsWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Job[]>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getJobVersionsOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get all schema profiles.
   *
   * @param {MetabaseApiGetAllSchemaProfilesOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllSchemaProfilesWithHttpOperationResponse(options?: Models.MetabaseApiGetAllSchemaProfilesOptionalParams): Promise<msRest.HttpOperationResponse<Models.SchemaProfile[]>> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllSchemaProfilesOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Create schema profile.
   *
   * @param {SchemaProfile} input
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createSchemaProfileWithHttpOperationResponse(input: Models.SchemaProfile, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.sendOperationRequest(
      {
        input,
        options
      },
      createSchemaProfileOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get one schema profile.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetOneSchemaProfileOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getOneSchemaProfileWithHttpOperationResponse(id: string, options?: Models.MetabaseApiGetOneSchemaProfileOptionalParams): Promise<msRest.HttpOperationResponse<Models.SchemaProfile>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getOneSchemaProfileOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Update schema profile.
   *
   * @param {string} id
   *
   * @param {SchemaProfile} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateSchemaProfileWithHttpOperationResponse(id: string, model: Models.SchemaProfile, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.sendOperationRequest(
      {
        id,
        model,
        options
      },
      updateSchemaProfileOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Delete schema profile.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteSchemaProfileWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteSchemaProfileOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get schema profile versions.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSchemaProfileVersionsWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.SchemaProfile[]>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getSchemaProfileVersionsOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get all schemas.
   *
   * @param {MetabaseApiGetAllSchemasOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllSchemasWithHttpOperationResponse(options?: Models.MetabaseApiGetAllSchemasOptionalParams): Promise<msRest.HttpOperationResponse<Models.Schema[]>> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllSchemasOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Create schema.
   *
   * @param {Schema} input
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createSchemaWithHttpOperationResponse(input: Models.Schema, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.sendOperationRequest(
      {
        input,
        options
      },
      createSchemaOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get one schema.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetOneSchemaOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getOneSchemaWithHttpOperationResponse(id: string, options?: Models.MetabaseApiGetOneSchemaOptionalParams): Promise<msRest.HttpOperationResponse<Models.Schema>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getOneSchemaOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Update schema.
   *
   * @param {string} id
   *
   * @param {Schema} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateSchemaWithHttpOperationResponse(id: string, model: Models.Schema, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.sendOperationRequest(
      {
        id,
        model,
        options
      },
      updateSchemaOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Delete schema.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteSchemaWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteSchemaOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get schema versions.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSchemaVersionsWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Schema[]>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getSchemaVersionsOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get all shapes.
   *
   * @param {MetabaseApiGetAllShapesOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllShapesWithHttpOperationResponse(options?: Models.MetabaseApiGetAllShapesOptionalParams): Promise<msRest.HttpOperationResponse<Models.Shape[]>> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllShapesOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Create shape.
   *
   * @param {Shape} input
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createShapeWithHttpOperationResponse(input: Models.Shape, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.sendOperationRequest(
      {
        input,
        options
      },
      createShapeOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get one shape.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetOneShapeOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getOneShapeWithHttpOperationResponse(id: string, options?: Models.MetabaseApiGetOneShapeOptionalParams): Promise<msRest.HttpOperationResponse<Models.Shape>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getOneShapeOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Update shape.
   *
   * @param {string} id
   *
   * @param {Shape} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateShapeWithHttpOperationResponse(id: string, model: Models.Shape, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.sendOperationRequest(
      {
        id,
        model,
        options
      },
      updateShapeOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Delete shape.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteShapeWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteShapeOperationSpec);
  }
  // methods on the client.

  /**
   * @summary Get shape versions.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getShapeVersionsWithHttpOperationResponse(id: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.Shape[]>> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getShapeVersionsOperationSpec);
  }

  /**
   * @summary Set batch status for go between batch.
   *
   * @param {string} id
   *
   * @param {BatchStatusGoBetweenScope} status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {{ [propertyName: string]: string[] }} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  setBatchStatusForGoBetweenBatch(id: string, status: Models.BatchStatusGoBetweenScope): Promise<{ [propertyName: string]: string[] }>;
  setBatchStatusForGoBetweenBatch(id: string, status: Models.BatchStatusGoBetweenScope, options: msRest.RequestOptionsBase): Promise<{ [propertyName: string]: string[] }>;
  setBatchStatusForGoBetweenBatch(id: string, status: Models.BatchStatusGoBetweenScope, callback: msRest.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  setBatchStatusForGoBetweenBatch(id: string, status: Models.BatchStatusGoBetweenScope, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  setBatchStatusForGoBetweenBatch(id: string, status: Models.BatchStatusGoBetweenScope, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<{ [propertyName: string]: string[] }>): any {
    return msRest.responseToBody(this.setBatchStatusForGoBetweenBatchWithHttpOperationResponse.bind(this), id, status, options, callback);
  }

  /**
   * @summary Get paged statuses for batch.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetPagedStatusesForBatchOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.PagedResultOfBatchStatus} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.PagedResultOfBatchStatus} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getPagedStatusesForBatch(id: string): Promise<Models.PagedResultOfBatchStatus>;
  getPagedStatusesForBatch(id: string, options: Models.MetabaseApiGetPagedStatusesForBatchOptionalParams): Promise<Models.PagedResultOfBatchStatus>;
  getPagedStatusesForBatch(id: string, callback: msRest.ServiceCallback<Models.PagedResultOfBatchStatus>): void;
  getPagedStatusesForBatch(id: string, options: Models.MetabaseApiGetPagedStatusesForBatchOptionalParams, callback: msRest.ServiceCallback<Models.PagedResultOfBatchStatus>): void;
  getPagedStatusesForBatch(id: string, options?: Models.MetabaseApiGetPagedStatusesForBatchOptionalParams, callback?: msRest.ServiceCallback<Models.PagedResultOfBatchStatus>): any {
    return msRest.responseToBody(this.getPagedStatusesForBatchWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Events placeholder for batch.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.DataflowEvent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.DataflowEvent} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  eventsPlaceholderForBatch(): Promise<Models.DataflowEvent>;
  eventsPlaceholderForBatch(options: msRest.RequestOptionsBase): Promise<Models.DataflowEvent>;
  eventsPlaceholderForBatch(callback: msRest.ServiceCallback<Models.DataflowEvent>): void;
  eventsPlaceholderForBatch(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataflowEvent>): void;
  eventsPlaceholderForBatch(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DataflowEvent>): any {
    return msRest.responseToBody(this.eventsPlaceholderForBatchWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @summary Get all batches.
   *
   * @param {MetabaseApiGetAllBatchesOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Batch[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllBatches(): Promise<Models.Batch[]>;
  getAllBatches(options: Models.MetabaseApiGetAllBatchesOptionalParams): Promise<Models.Batch[]>;
  getAllBatches(callback: msRest.ServiceCallback<Models.Batch[]>): void;
  getAllBatches(options: Models.MetabaseApiGetAllBatchesOptionalParams, callback: msRest.ServiceCallback<Models.Batch[]>): void;
  getAllBatches(options?: Models.MetabaseApiGetAllBatchesOptionalParams, callback?: msRest.ServiceCallback<Models.Batch[]>): any {
    return msRest.responseToBody(this.getAllBatchesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @summary Create batch.
   *
   * @param {Batch} input
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  createBatch(input: Models.Batch): Promise<any>;
  createBatch(input: Models.Batch, options: msRest.RequestOptionsBase): Promise<any>;
  createBatch(input: Models.Batch, callback: msRest.ServiceCallback<any>): void;
  createBatch(input: Models.Batch, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createBatch(input: Models.Batch, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.createBatchWithHttpOperationResponse.bind(this), input, options, callback);
  }

  /**
   * @summary Get one batch.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetOneBatchOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Batch} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Batch} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getOneBatch(id: string): Promise<Models.Batch>;
  getOneBatch(id: string, options: Models.MetabaseApiGetOneBatchOptionalParams): Promise<Models.Batch>;
  getOneBatch(id: string, callback: msRest.ServiceCallback<Models.Batch>): void;
  getOneBatch(id: string, options: Models.MetabaseApiGetOneBatchOptionalParams, callback: msRest.ServiceCallback<Models.Batch>): void;
  getOneBatch(id: string, options?: Models.MetabaseApiGetOneBatchOptionalParams, callback?: msRest.ServiceCallback<Models.Batch>): any {
    return msRest.responseToBody(this.getOneBatchWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Update batch.
   *
   * @param {string} id
   *
   * @param {Batch} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updateBatch(id: string, model: Models.Batch): Promise<any>;
  updateBatch(id: string, model: Models.Batch, options: msRest.RequestOptionsBase): Promise<any>;
  updateBatch(id: string, model: Models.Batch, callback: msRest.ServiceCallback<any>): void;
  updateBatch(id: string, model: Models.Batch, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateBatch(id: string, model: Models.Batch, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.updateBatchWithHttpOperationResponse.bind(this), id, model, options, callback);
  }

  /**
   * @summary Delete batch.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteBatch(id: string): Promise<void>;
  deleteBatch(id: string, options: msRest.RequestOptionsBase): Promise<void>;
  deleteBatch(id: string, callback: msRest.ServiceCallback<void>): void;
  deleteBatch(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteBatch(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.deleteBatchWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Get batch versions.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Batch[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getBatchVersions(id: string): Promise<Models.Batch[]>;
  getBatchVersions(id: string, options: msRest.RequestOptionsBase): Promise<Models.Batch[]>;
  getBatchVersions(id: string, callback: msRest.ServiceCallback<Models.Batch[]>): void;
  getBatchVersions(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Batch[]>): void;
  getBatchVersions(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Batch[]>): any {
    return msRest.responseToBody(this.getBatchVersionsWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Get all connections.
   *
   * @param {MetabaseApiGetAllConnectionsOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Connection[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllConnections(): Promise<Models.Connection[]>;
  getAllConnections(options: Models.MetabaseApiGetAllConnectionsOptionalParams): Promise<Models.Connection[]>;
  getAllConnections(callback: msRest.ServiceCallback<Models.Connection[]>): void;
  getAllConnections(options: Models.MetabaseApiGetAllConnectionsOptionalParams, callback: msRest.ServiceCallback<Models.Connection[]>): void;
  getAllConnections(options?: Models.MetabaseApiGetAllConnectionsOptionalParams, callback?: msRest.ServiceCallback<Models.Connection[]>): any {
    return msRest.responseToBody(this.getAllConnectionsWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @summary Create connection.
   *
   * @param {Connection} input
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  createConnection(input: Models.Connection): Promise<any>;
  createConnection(input: Models.Connection, options: msRest.RequestOptionsBase): Promise<any>;
  createConnection(input: Models.Connection, callback: msRest.ServiceCallback<any>): void;
  createConnection(input: Models.Connection, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createConnection(input: Models.Connection, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.createConnectionWithHttpOperationResponse.bind(this), input, options, callback);
  }

  /**
   * @summary Get one connection.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetOneConnectionOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Connection} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Connection} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getOneConnection(id: string): Promise<Models.Connection>;
  getOneConnection(id: string, options: Models.MetabaseApiGetOneConnectionOptionalParams): Promise<Models.Connection>;
  getOneConnection(id: string, callback: msRest.ServiceCallback<Models.Connection>): void;
  getOneConnection(id: string, options: Models.MetabaseApiGetOneConnectionOptionalParams, callback: msRest.ServiceCallback<Models.Connection>): void;
  getOneConnection(id: string, options?: Models.MetabaseApiGetOneConnectionOptionalParams, callback?: msRest.ServiceCallback<Models.Connection>): any {
    return msRest.responseToBody(this.getOneConnectionWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Update connection.
   *
   * @param {string} id
   *
   * @param {Connection} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updateConnection(id: string, model: Models.Connection): Promise<any>;
  updateConnection(id: string, model: Models.Connection, options: msRest.RequestOptionsBase): Promise<any>;
  updateConnection(id: string, model: Models.Connection, callback: msRest.ServiceCallback<any>): void;
  updateConnection(id: string, model: Models.Connection, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateConnection(id: string, model: Models.Connection, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.updateConnectionWithHttpOperationResponse.bind(this), id, model, options, callback);
  }

  /**
   * @summary Delete connection.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteConnection(id: string): Promise<void>;
  deleteConnection(id: string, options: msRest.RequestOptionsBase): Promise<void>;
  deleteConnection(id: string, callback: msRest.ServiceCallback<void>): void;
  deleteConnection(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteConnection(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.deleteConnectionWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Get connection versions.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Connection[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getConnectionVersions(id: string): Promise<Models.Connection[]>;
  getConnectionVersions(id: string, options: msRest.RequestOptionsBase): Promise<Models.Connection[]>;
  getConnectionVersions(id: string, callback: msRest.ServiceCallback<Models.Connection[]>): void;
  getConnectionVersions(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Connection[]>): void;
  getConnectionVersions(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Connection[]>): any {
    return msRest.responseToBody(this.getConnectionVersionsWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Get all flows.
   *
   * @param {MetabaseApiGetAllFlowsOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Flow[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllFlows(): Promise<Models.Flow[]>;
  getAllFlows(options: Models.MetabaseApiGetAllFlowsOptionalParams): Promise<Models.Flow[]>;
  getAllFlows(callback: msRest.ServiceCallback<Models.Flow[]>): void;
  getAllFlows(options: Models.MetabaseApiGetAllFlowsOptionalParams, callback: msRest.ServiceCallback<Models.Flow[]>): void;
  getAllFlows(options?: Models.MetabaseApiGetAllFlowsOptionalParams, callback?: msRest.ServiceCallback<Models.Flow[]>): any {
    return msRest.responseToBody(this.getAllFlowsWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @summary Create flow.
   *
   * @param {Flow} input
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  createFlow(input: Models.Flow): Promise<any>;
  createFlow(input: Models.Flow, options: msRest.RequestOptionsBase): Promise<any>;
  createFlow(input: Models.Flow, callback: msRest.ServiceCallback<any>): void;
  createFlow(input: Models.Flow, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createFlow(input: Models.Flow, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.createFlowWithHttpOperationResponse.bind(this), input, options, callback);
  }

  /**
   * @summary Get one flow.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetOneFlowOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Flow} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Flow} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getOneFlow(id: string): Promise<Models.Flow>;
  getOneFlow(id: string, options: Models.MetabaseApiGetOneFlowOptionalParams): Promise<Models.Flow>;
  getOneFlow(id: string, callback: msRest.ServiceCallback<Models.Flow>): void;
  getOneFlow(id: string, options: Models.MetabaseApiGetOneFlowOptionalParams, callback: msRest.ServiceCallback<Models.Flow>): void;
  getOneFlow(id: string, options?: Models.MetabaseApiGetOneFlowOptionalParams, callback?: msRest.ServiceCallback<Models.Flow>): any {
    return msRest.responseToBody(this.getOneFlowWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Update flow.
   *
   * @param {string} id
   *
   * @param {Flow} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updateFlow(id: string, model: Models.Flow): Promise<any>;
  updateFlow(id: string, model: Models.Flow, options: msRest.RequestOptionsBase): Promise<any>;
  updateFlow(id: string, model: Models.Flow, callback: msRest.ServiceCallback<any>): void;
  updateFlow(id: string, model: Models.Flow, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateFlow(id: string, model: Models.Flow, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.updateFlowWithHttpOperationResponse.bind(this), id, model, options, callback);
  }

  /**
   * @summary Delete flow.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteFlow(id: string): Promise<void>;
  deleteFlow(id: string, options: msRest.RequestOptionsBase): Promise<void>;
  deleteFlow(id: string, callback: msRest.ServiceCallback<void>): void;
  deleteFlow(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteFlow(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.deleteFlowWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Get flow versions.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Flow[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getFlowVersions(id: string): Promise<Models.Flow[]>;
  getFlowVersions(id: string, options: msRest.RequestOptionsBase): Promise<Models.Flow[]>;
  getFlowVersions(id: string, callback: msRest.ServiceCallback<Models.Flow[]>): void;
  getFlowVersions(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Flow[]>): void;
  getFlowVersions(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Flow[]>): any {
    return msRest.responseToBody(this.getFlowVersionsWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Get job mapping.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetJobMappingOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Mapping} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Mapping} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getJobMapping(id: string): Promise<Models.Mapping>;
  getJobMapping(id: string, options: Models.MetabaseApiGetJobMappingOptionalParams): Promise<Models.Mapping>;
  getJobMapping(id: string, callback: msRest.ServiceCallback<Models.Mapping>): void;
  getJobMapping(id: string, options: Models.MetabaseApiGetJobMappingOptionalParams, callback: msRest.ServiceCallback<Models.Mapping>): void;
  getJobMapping(id: string, options?: Models.MetabaseApiGetJobMappingOptionalParams, callback?: msRest.ServiceCallback<Models.Mapping>): any {
    return msRest.responseToBody(this.getJobMappingWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Set job status for go between.
   *
   * @param {string} id
   *
   * @param {JobStatusGoBetweenScope} status
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {{ [propertyName: string]: string[] }} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  setJobStatusForGoBetween(id: string, status: Models.JobStatusGoBetweenScope): Promise<{ [propertyName: string]: string[] }>;
  setJobStatusForGoBetween(id: string, status: Models.JobStatusGoBetweenScope, options: msRest.RequestOptionsBase): Promise<{ [propertyName: string]: string[] }>;
  setJobStatusForGoBetween(id: string, status: Models.JobStatusGoBetweenScope, callback: msRest.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  setJobStatusForGoBetween(id: string, status: Models.JobStatusGoBetweenScope, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  setJobStatusForGoBetween(id: string, status: Models.JobStatusGoBetweenScope, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<{ [propertyName: string]: string[] }>): any {
    return msRest.responseToBody(this.setJobStatusForGoBetweenWithHttpOperationResponse.bind(this), id, status, options, callback);
  }

  /**
   * @summary Set real time state.
   *
   * @param {string} id
   *
   * @param {RealTimeStateScope} state
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {{ [propertyName: string]: string[] }} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  setRealTimeState(id: string, state: Models.RealTimeStateScope): Promise<{ [propertyName: string]: string[] }>;
  setRealTimeState(id: string, state: Models.RealTimeStateScope, options: msRest.RequestOptionsBase): Promise<{ [propertyName: string]: string[] }>;
  setRealTimeState(id: string, state: Models.RealTimeStateScope, callback: msRest.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  setRealTimeState(id: string, state: Models.RealTimeStateScope, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<{ [propertyName: string]: string[] }>): void;
  setRealTimeState(id: string, state: Models.RealTimeStateScope, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<{ [propertyName: string]: string[] }>): any {
    return msRest.responseToBody(this.setRealTimeStateWithHttpOperationResponse.bind(this), id, state, options, callback);
  }

  /**
   * @summary Get all jobs.
   *
   * @param {MetabaseApiGetAllJobsOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Job[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllJobs(): Promise<Models.Job[]>;
  getAllJobs(options: Models.MetabaseApiGetAllJobsOptionalParams): Promise<Models.Job[]>;
  getAllJobs(callback: msRest.ServiceCallback<Models.Job[]>): void;
  getAllJobs(options: Models.MetabaseApiGetAllJobsOptionalParams, callback: msRest.ServiceCallback<Models.Job[]>): void;
  getAllJobs(options?: Models.MetabaseApiGetAllJobsOptionalParams, callback?: msRest.ServiceCallback<Models.Job[]>): any {
    return msRest.responseToBody(this.getAllJobsWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @summary Create job.
   *
   * @param {Job} input
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  createJob(input: Models.Job): Promise<any>;
  createJob(input: Models.Job, options: msRest.RequestOptionsBase): Promise<any>;
  createJob(input: Models.Job, callback: msRest.ServiceCallback<any>): void;
  createJob(input: Models.Job, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createJob(input: Models.Job, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.createJobWithHttpOperationResponse.bind(this), input, options, callback);
  }

  /**
   * @summary Get paged statuses for job.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetPagedStatusesForJobOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.PagedResultOfJobStatus} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.PagedResultOfJobStatus} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getPagedStatusesForJob(id: string): Promise<Models.PagedResultOfJobStatus>;
  getPagedStatusesForJob(id: string, options: Models.MetabaseApiGetPagedStatusesForJobOptionalParams): Promise<Models.PagedResultOfJobStatus>;
  getPagedStatusesForJob(id: string, callback: msRest.ServiceCallback<Models.PagedResultOfJobStatus>): void;
  getPagedStatusesForJob(id: string, options: Models.MetabaseApiGetPagedStatusesForJobOptionalParams, callback: msRest.ServiceCallback<Models.PagedResultOfJobStatus>): void;
  getPagedStatusesForJob(id: string, options?: Models.MetabaseApiGetPagedStatusesForJobOptionalParams, callback?: msRest.ServiceCallback<Models.PagedResultOfJobStatus>): any {
    return msRest.responseToBody(this.getPagedStatusesForJobWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Events placeholder for job.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.DataflowEvent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.DataflowEvent} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  eventsPlaceholderForJob(): Promise<Models.DataflowEvent>;
  eventsPlaceholderForJob(options: msRest.RequestOptionsBase): Promise<Models.DataflowEvent>;
  eventsPlaceholderForJob(callback: msRest.ServiceCallback<Models.DataflowEvent>): void;
  eventsPlaceholderForJob(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataflowEvent>): void;
  eventsPlaceholderForJob(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.DataflowEvent>): any {
    return msRest.responseToBody(this.eventsPlaceholderForJobWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @summary Get one job.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetOneJobOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Job} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Job} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getOneJob(id: string): Promise<Models.Job>;
  getOneJob(id: string, options: Models.MetabaseApiGetOneJobOptionalParams): Promise<Models.Job>;
  getOneJob(id: string, callback: msRest.ServiceCallback<Models.Job>): void;
  getOneJob(id: string, options: Models.MetabaseApiGetOneJobOptionalParams, callback: msRest.ServiceCallback<Models.Job>): void;
  getOneJob(id: string, options?: Models.MetabaseApiGetOneJobOptionalParams, callback?: msRest.ServiceCallback<Models.Job>): any {
    return msRest.responseToBody(this.getOneJobWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Update job.
   *
   * @param {string} id
   *
   * @param {Job} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updateJob(id: string, model: Models.Job): Promise<any>;
  updateJob(id: string, model: Models.Job, options: msRest.RequestOptionsBase): Promise<any>;
  updateJob(id: string, model: Models.Job, callback: msRest.ServiceCallback<any>): void;
  updateJob(id: string, model: Models.Job, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateJob(id: string, model: Models.Job, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.updateJobWithHttpOperationResponse.bind(this), id, model, options, callback);
  }

  /**
   * @summary Delete job.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteJob(id: string): Promise<void>;
  deleteJob(id: string, options: msRest.RequestOptionsBase): Promise<void>;
  deleteJob(id: string, callback: msRest.ServiceCallback<void>): void;
  deleteJob(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteJob(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.deleteJobWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Get job versions.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Job[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getJobVersions(id: string): Promise<Models.Job[]>;
  getJobVersions(id: string, options: msRest.RequestOptionsBase): Promise<Models.Job[]>;
  getJobVersions(id: string, callback: msRest.ServiceCallback<Models.Job[]>): void;
  getJobVersions(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Job[]>): void;
  getJobVersions(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Job[]>): any {
    return msRest.responseToBody(this.getJobVersionsWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Get all schema profiles.
   *
   * @param {MetabaseApiGetAllSchemaProfilesOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.SchemaProfile[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllSchemaProfiles(): Promise<Models.SchemaProfile[]>;
  getAllSchemaProfiles(options: Models.MetabaseApiGetAllSchemaProfilesOptionalParams): Promise<Models.SchemaProfile[]>;
  getAllSchemaProfiles(callback: msRest.ServiceCallback<Models.SchemaProfile[]>): void;
  getAllSchemaProfiles(options: Models.MetabaseApiGetAllSchemaProfilesOptionalParams, callback: msRest.ServiceCallback<Models.SchemaProfile[]>): void;
  getAllSchemaProfiles(options?: Models.MetabaseApiGetAllSchemaProfilesOptionalParams, callback?: msRest.ServiceCallback<Models.SchemaProfile[]>): any {
    return msRest.responseToBody(this.getAllSchemaProfilesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @summary Create schema profile.
   *
   * @param {SchemaProfile} input
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  createSchemaProfile(input: Models.SchemaProfile): Promise<any>;
  createSchemaProfile(input: Models.SchemaProfile, options: msRest.RequestOptionsBase): Promise<any>;
  createSchemaProfile(input: Models.SchemaProfile, callback: msRest.ServiceCallback<any>): void;
  createSchemaProfile(input: Models.SchemaProfile, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createSchemaProfile(input: Models.SchemaProfile, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.createSchemaProfileWithHttpOperationResponse.bind(this), input, options, callback);
  }

  /**
   * @summary Get one schema profile.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetOneSchemaProfileOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.SchemaProfile} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.SchemaProfile} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getOneSchemaProfile(id: string): Promise<Models.SchemaProfile>;
  getOneSchemaProfile(id: string, options: Models.MetabaseApiGetOneSchemaProfileOptionalParams): Promise<Models.SchemaProfile>;
  getOneSchemaProfile(id: string, callback: msRest.ServiceCallback<Models.SchemaProfile>): void;
  getOneSchemaProfile(id: string, options: Models.MetabaseApiGetOneSchemaProfileOptionalParams, callback: msRest.ServiceCallback<Models.SchemaProfile>): void;
  getOneSchemaProfile(id: string, options?: Models.MetabaseApiGetOneSchemaProfileOptionalParams, callback?: msRest.ServiceCallback<Models.SchemaProfile>): any {
    return msRest.responseToBody(this.getOneSchemaProfileWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Update schema profile.
   *
   * @param {string} id
   *
   * @param {SchemaProfile} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updateSchemaProfile(id: string, model: Models.SchemaProfile): Promise<any>;
  updateSchemaProfile(id: string, model: Models.SchemaProfile, options: msRest.RequestOptionsBase): Promise<any>;
  updateSchemaProfile(id: string, model: Models.SchemaProfile, callback: msRest.ServiceCallback<any>): void;
  updateSchemaProfile(id: string, model: Models.SchemaProfile, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateSchemaProfile(id: string, model: Models.SchemaProfile, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.updateSchemaProfileWithHttpOperationResponse.bind(this), id, model, options, callback);
  }

  /**
   * @summary Delete schema profile.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSchemaProfile(id: string): Promise<void>;
  deleteSchemaProfile(id: string, options: msRest.RequestOptionsBase): Promise<void>;
  deleteSchemaProfile(id: string, callback: msRest.ServiceCallback<void>): void;
  deleteSchemaProfile(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSchemaProfile(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.deleteSchemaProfileWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Get schema profile versions.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.SchemaProfile[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSchemaProfileVersions(id: string): Promise<Models.SchemaProfile[]>;
  getSchemaProfileVersions(id: string, options: msRest.RequestOptionsBase): Promise<Models.SchemaProfile[]>;
  getSchemaProfileVersions(id: string, callback: msRest.ServiceCallback<Models.SchemaProfile[]>): void;
  getSchemaProfileVersions(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SchemaProfile[]>): void;
  getSchemaProfileVersions(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SchemaProfile[]>): any {
    return msRest.responseToBody(this.getSchemaProfileVersionsWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Get all schemas.
   *
   * @param {MetabaseApiGetAllSchemasOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Schema[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllSchemas(): Promise<Models.Schema[]>;
  getAllSchemas(options: Models.MetabaseApiGetAllSchemasOptionalParams): Promise<Models.Schema[]>;
  getAllSchemas(callback: msRest.ServiceCallback<Models.Schema[]>): void;
  getAllSchemas(options: Models.MetabaseApiGetAllSchemasOptionalParams, callback: msRest.ServiceCallback<Models.Schema[]>): void;
  getAllSchemas(options?: Models.MetabaseApiGetAllSchemasOptionalParams, callback?: msRest.ServiceCallback<Models.Schema[]>): any {
    return msRest.responseToBody(this.getAllSchemasWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @summary Create schema.
   *
   * @param {Schema} input
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  createSchema(input: Models.Schema): Promise<any>;
  createSchema(input: Models.Schema, options: msRest.RequestOptionsBase): Promise<any>;
  createSchema(input: Models.Schema, callback: msRest.ServiceCallback<any>): void;
  createSchema(input: Models.Schema, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createSchema(input: Models.Schema, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.createSchemaWithHttpOperationResponse.bind(this), input, options, callback);
  }

  /**
   * @summary Get one schema.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetOneSchemaOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Schema} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Schema} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getOneSchema(id: string): Promise<Models.Schema>;
  getOneSchema(id: string, options: Models.MetabaseApiGetOneSchemaOptionalParams): Promise<Models.Schema>;
  getOneSchema(id: string, callback: msRest.ServiceCallback<Models.Schema>): void;
  getOneSchema(id: string, options: Models.MetabaseApiGetOneSchemaOptionalParams, callback: msRest.ServiceCallback<Models.Schema>): void;
  getOneSchema(id: string, options?: Models.MetabaseApiGetOneSchemaOptionalParams, callback?: msRest.ServiceCallback<Models.Schema>): any {
    return msRest.responseToBody(this.getOneSchemaWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Update schema.
   *
   * @param {string} id
   *
   * @param {Schema} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updateSchema(id: string, model: Models.Schema): Promise<any>;
  updateSchema(id: string, model: Models.Schema, options: msRest.RequestOptionsBase): Promise<any>;
  updateSchema(id: string, model: Models.Schema, callback: msRest.ServiceCallback<any>): void;
  updateSchema(id: string, model: Models.Schema, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateSchema(id: string, model: Models.Schema, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.updateSchemaWithHttpOperationResponse.bind(this), id, model, options, callback);
  }

  /**
   * @summary Delete schema.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSchema(id: string): Promise<void>;
  deleteSchema(id: string, options: msRest.RequestOptionsBase): Promise<void>;
  deleteSchema(id: string, callback: msRest.ServiceCallback<void>): void;
  deleteSchema(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSchema(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.deleteSchemaWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Get schema versions.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Schema[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getSchemaVersions(id: string): Promise<Models.Schema[]>;
  getSchemaVersions(id: string, options: msRest.RequestOptionsBase): Promise<Models.Schema[]>;
  getSchemaVersions(id: string, callback: msRest.ServiceCallback<Models.Schema[]>): void;
  getSchemaVersions(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Schema[]>): void;
  getSchemaVersions(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Schema[]>): any {
    return msRest.responseToBody(this.getSchemaVersionsWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Get all shapes.
   *
   * @param {MetabaseApiGetAllShapesOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Shape[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllShapes(): Promise<Models.Shape[]>;
  getAllShapes(options: Models.MetabaseApiGetAllShapesOptionalParams): Promise<Models.Shape[]>;
  getAllShapes(callback: msRest.ServiceCallback<Models.Shape[]>): void;
  getAllShapes(options: Models.MetabaseApiGetAllShapesOptionalParams, callback: msRest.ServiceCallback<Models.Shape[]>): void;
  getAllShapes(options?: Models.MetabaseApiGetAllShapesOptionalParams, callback?: msRest.ServiceCallback<Models.Shape[]>): any {
    return msRest.responseToBody(this.getAllShapesWithHttpOperationResponse.bind(this), options, callback);
  }

  /**
   * @summary Create shape.
   *
   * @param {Shape} input
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  createShape(input: Models.Shape): Promise<any>;
  createShape(input: Models.Shape, options: msRest.RequestOptionsBase): Promise<any>;
  createShape(input: Models.Shape, callback: msRest.ServiceCallback<any>): void;
  createShape(input: Models.Shape, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  createShape(input: Models.Shape, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.createShapeWithHttpOperationResponse.bind(this), input, options, callback);
  }

  /**
   * @summary Get one shape.
   *
   * @param {string} id
   *
   * @param {MetabaseApiGetOneShapeOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Shape} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Shape} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getOneShape(id: string): Promise<Models.Shape>;
  getOneShape(id: string, options: Models.MetabaseApiGetOneShapeOptionalParams): Promise<Models.Shape>;
  getOneShape(id: string, callback: msRest.ServiceCallback<Models.Shape>): void;
  getOneShape(id: string, options: Models.MetabaseApiGetOneShapeOptionalParams, callback: msRest.ServiceCallback<Models.Shape>): void;
  getOneShape(id: string, options?: Models.MetabaseApiGetOneShapeOptionalParams, callback?: msRest.ServiceCallback<Models.Shape>): any {
    return msRest.responseToBody(this.getOneShapeWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Update shape.
   *
   * @param {string} id
   *
   * @param {Shape} model
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updateShape(id: string, model: Models.Shape): Promise<any>;
  updateShape(id: string, model: Models.Shape, options: msRest.RequestOptionsBase): Promise<any>;
  updateShape(id: string, model: Models.Shape, callback: msRest.ServiceCallback<any>): void;
  updateShape(id: string, model: Models.Shape, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  updateShape(id: string, model: Models.Shape, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.updateShapeWithHttpOperationResponse.bind(this), id, model, options, callback);
  }

  /**
   * @summary Delete shape.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteShape(id: string): Promise<void>;
  deleteShape(id: string, options: msRest.RequestOptionsBase): Promise<void>;
  deleteShape(id: string, callback: msRest.ServiceCallback<void>): void;
  deleteShape(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteShape(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): any {
    return msRest.responseToBody(this.deleteShapeWithHttpOperationResponse.bind(this), id, options, callback);
  }

  /**
   * @summary Get shape versions.
   *
   * @param {string} id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.Shape[]} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getShapeVersions(id: string): Promise<Models.Shape[]>;
  getShapeVersions(id: string, options: msRest.RequestOptionsBase): Promise<Models.Shape[]>;
  getShapeVersions(id: string, callback: msRest.ServiceCallback<Models.Shape[]>): void;
  getShapeVersions(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Shape[]>): void;
  getShapeVersions(id: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.Shape[]>): any {
    return msRest.responseToBody(this.getShapeVersionsWithHttpOperationResponse.bind(this), id, options, callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const setBatchStatusForGoBetweenBatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/batches/{id}/status/go-between-agent",
  urlParameters: [
    Parameters.id0
  ],
  requestBody: {
    parameterPath: "status",
    mapper: {
      ...Mappers.BatchStatusGoBetweenScope,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    202: {},
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getPagedStatusesForBatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/batches/{id}/status",
  urlParameters: [
    Parameters.id0
  ],
  queryParameters: [
    Parameters.page,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedResultOfBatchStatus
    },
    default: {}
  },
  serializer
};

const eventsPlaceholderForBatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/batches/events",
  responses: {
    200: {
      bodyMapper: Mappers.DataflowEvent
    },
    default: {}
  },
  serializer
};

const getAllBatchesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/batches",
  queryParameters: [
    Parameters.id1,
    Parameters.name,
    Parameters.description,
    Parameters.jobId,
    Parameters.createdBy,
    Parameters.updatedBy,
    Parameters.deletedBy
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Batch"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createBatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/batches",
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.Batch,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.Batch
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getOneBatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/batches/{id}",
  urlParameters: [
    Parameters.id0
  ],
  queryParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Batch
    },
    default: {}
  },
  serializer
};

const updateBatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/batches/{id}",
  urlParameters: [
    Parameters.id0
  ],
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.Batch,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    202: {
      bodyMapper: Mappers.Batch
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    404: {},
    409: {
      bodyMapper: Mappers.Batch
    },
    default: {}
  },
  serializer
};

const deleteBatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/batches/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getBatchVersionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/batches/{id}/versions",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Batch"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getAllConnectionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/connections",
  queryParameters: [
    Parameters.id1,
    Parameters.name,
    Parameters.description,
    Parameters.plugin,
    Parameters.preferredAgent,
    Parameters.createdBy,
    Parameters.updatedBy,
    Parameters.deletedBy
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Connection"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/connections",
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.Connection,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.Connection
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getOneConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/connections/{id}",
  urlParameters: [
    Parameters.id0
  ],
  queryParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Connection
    },
    default: {}
  },
  serializer
};

const updateConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/connections/{id}",
  urlParameters: [
    Parameters.id0
  ],
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.Connection,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    202: {
      bodyMapper: Mappers.Connection
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    404: {},
    409: {
      bodyMapper: Mappers.Connection
    },
    default: {}
  },
  serializer
};

const deleteConnectionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/connections/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getConnectionVersionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/connections/{id}/versions",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Connection"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getAllFlowsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/flows",
  queryParameters: [
    Parameters.id1,
    Parameters.name,
    Parameters.description,
    Parameters.createdBy,
    Parameters.updatedBy,
    Parameters.deletedBy
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Flow"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createFlowOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/flows",
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.Flow,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.Flow
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getOneFlowOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/flows/{id}",
  urlParameters: [
    Parameters.id0
  ],
  queryParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Flow
    },
    default: {}
  },
  serializer
};

const updateFlowOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/flows/{id}",
  urlParameters: [
    Parameters.id0
  ],
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.Flow,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    202: {
      bodyMapper: Mappers.Flow
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    404: {},
    409: {
      bodyMapper: Mappers.Flow
    },
    default: {}
  },
  serializer
};

const deleteFlowOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/flows/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getFlowVersionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/flows/{id}/versions",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Flow"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getJobMappingOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/jobs/{id}/mapping",
  urlParameters: [
    Parameters.id0
  ],
  queryParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Mapping
    },
    default: {}
  },
  serializer
};

const setJobStatusForGoBetweenOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/jobs/{id}/status/go-between",
  urlParameters: [
    Parameters.id0
  ],
  requestBody: {
    parameterPath: "status",
    mapper: {
      ...Mappers.JobStatusGoBetweenScope,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    202: {},
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const setRealTimeStateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/jobs/{id}/status/realtime",
  urlParameters: [
    Parameters.id0
  ],
  requestBody: {
    parameterPath: "state",
    mapper: {
      ...Mappers.RealTimeStateScope,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    202: {},
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getAllJobsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/jobs",
  queryParameters: [
    Parameters.id1,
    Parameters.name,
    Parameters.description,
    Parameters.connectionId,
    Parameters.schemaId,
    Parameters.shapeId,
    Parameters.agentId,
    Parameters.type,
    Parameters.createdBy,
    Parameters.updatedBy,
    Parameters.deletedBy
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Job"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/jobs",
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.Job,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.Job
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getPagedStatusesForJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/jobs/{id}/status",
  urlParameters: [
    Parameters.id0
  ],
  queryParameters: [
    Parameters.page,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedResultOfJobStatus
    },
    default: {}
  },
  serializer
};

const eventsPlaceholderForJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/jobs/events",
  responses: {
    200: {
      bodyMapper: Mappers.DataflowEvent
    },
    default: {}
  },
  serializer
};

const getOneJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/jobs/{id}",
  urlParameters: [
    Parameters.id0
  ],
  queryParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Job
    },
    default: {}
  },
  serializer
};

const updateJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/jobs/{id}",
  urlParameters: [
    Parameters.id0
  ],
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.Job,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    202: {
      bodyMapper: Mappers.Job
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    404: {},
    409: {
      bodyMapper: Mappers.Job
    },
    default: {}
  },
  serializer
};

const deleteJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/jobs/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getJobVersionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/jobs/{id}/versions",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Job"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getAllSchemaProfilesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/schemaprofiles",
  queryParameters: [
    Parameters.id1,
    Parameters.name,
    Parameters.description,
    Parameters.connectionId,
    Parameters.createdBy,
    Parameters.updatedBy,
    Parameters.deletedBy
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SchemaProfile"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createSchemaProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/schemaprofiles",
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.SchemaProfile,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.SchemaProfile
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getOneSchemaProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/schemaprofiles/{id}",
  urlParameters: [
    Parameters.id0
  ],
  queryParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SchemaProfile
    },
    default: {}
  },
  serializer
};

const updateSchemaProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/schemaprofiles/{id}",
  urlParameters: [
    Parameters.id0
  ],
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.SchemaProfile,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    202: {
      bodyMapper: Mappers.SchemaProfile
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    404: {},
    409: {
      bodyMapper: Mappers.SchemaProfile
    },
    default: {}
  },
  serializer
};

const deleteSchemaProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/schemaprofiles/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getSchemaProfileVersionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/schemaprofiles/{id}/versions",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SchemaProfile"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getAllSchemasOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/schemas",
  queryParameters: [
    Parameters.id1,
    Parameters.name,
    Parameters.description,
    Parameters.discoveredId,
    Parameters.discoveredName,
    Parameters.discoveredDescription,
    Parameters.query,
    Parameters.connectionId,
    Parameters.profilingJobId,
    Parameters.publisherMetaJson,
    Parameters.capability,
    Parameters.createdBy,
    Parameters.updatedBy,
    Parameters.deletedBy
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Schema"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createSchemaOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/schemas",
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.Schema,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.Schema
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getOneSchemaOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/schemas/{id}",
  urlParameters: [
    Parameters.id0
  ],
  queryParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Schema
    },
    default: {}
  },
  serializer
};

const updateSchemaOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/schemas/{id}",
  urlParameters: [
    Parameters.id0
  ],
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.Schema,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    202: {
      bodyMapper: Mappers.Schema
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    404: {},
    409: {
      bodyMapper: Mappers.Schema
    },
    default: {}
  },
  serializer
};

const deleteSchemaOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/schemas/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getSchemaVersionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/schemas/{id}/versions",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Schema"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getAllShapesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/shapes",
  queryParameters: [
    Parameters.id1,
    Parameters.name,
    Parameters.description,
    Parameters.copiedFromSchemaId,
    Parameters.createdBy,
    Parameters.updatedBy,
    Parameters.deletedBy
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Shape"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const createShapeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/shapes",
  requestBody: {
    parameterPath: "input",
    mapper: {
      ...Mappers.Shape,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.Shape
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

const getOneShapeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/shapes/{id}",
  urlParameters: [
    Parameters.id0
  ],
  queryParameters: [
    Parameters.version
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Shape
    },
    default: {}
  },
  serializer
};

const updateShapeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/shapes/{id}",
  urlParameters: [
    Parameters.id0
  ],
  requestBody: {
    parameterPath: "model",
    mapper: {
      ...Mappers.Shape,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    202: {
      bodyMapper: Mappers.Shape
    },
    400: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    },
    404: {},
    409: {
      bodyMapper: Mappers.Shape
    },
    default: {}
  },
  serializer
};

const deleteShapeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/shapes/{id}",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getShapeVersionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/shapes/{id}/versions",
  urlParameters: [
    Parameters.id0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Shape"
            }
          }
        }
      }
    },
    default: {}
  },
  serializer
};

export { MetabaseApi, Models as MetabaseApiModels, Mappers as MetabaseApiMappers };
