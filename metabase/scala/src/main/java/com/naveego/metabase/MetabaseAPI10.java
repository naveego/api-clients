/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.naveego.metabase;

import com.microsoft.rest.*;
import com.naveego.metabase.models.*;
import rx.Observable;

import java.util.List;
import java.util.Map;

/**
 * The interface for MetabaseAPI10 class.
 */
public interface MetabaseAPI10 {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "http://metabase.n5o.red";

    /**
     * Set batch status for go between batch.
     *
     * @param id the String value
     * @param status the BatchStatusGoBetweenScope value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Map&lt;String, List&lt;String&gt;&gt; object if successful.
     */
    Map<String, List<String>> setBatchStatusForGoBetweenBatch(String id, BatchStatusGoBetweenScope status);

    /**
     * Set batch status for go between batch.
     *
     * @param id the String value
     * @param status the BatchStatusGoBetweenScope value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Map<String, List<String>>> setBatchStatusForGoBetweenBatchAsync(String id, BatchStatusGoBetweenScope status, final ServiceCallback<Map<String, List<String>>> serviceCallback);

    /**
     * Set batch status for go between batch.
     *
     * @param id the String value
     * @param status the BatchStatusGoBetweenScope value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Map&lt;String, List&lt;String&gt;&gt; object
     */
    Observable<Map<String, List<String>>> setBatchStatusForGoBetweenBatchAsync(String id, BatchStatusGoBetweenScope status);

    /**
     * Set batch status for go between batch.
     *
     * @param id the String value
     * @param status the BatchStatusGoBetweenScope value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Map&lt;String, List&lt;String&gt;&gt; object
     */
    Observable<ServiceResponse<Map<String, List<String>>>> setBatchStatusForGoBetweenBatchWithServiceResponseAsync(String id, BatchStatusGoBetweenScope status);

    /**
     * Get paged statuses for batch.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResultOfBatchStatus object if successful.
     */
    PagedResultOfBatchStatus getPagedStatusesForBatch(String id);

    /**
     * Get paged statuses for batch.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResultOfBatchStatus> getPagedStatusesForBatchAsync(String id, final ServiceCallback<PagedResultOfBatchStatus> serviceCallback);

    /**
     * Get paged statuses for batch.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResultOfBatchStatus object
     */
    Observable<PagedResultOfBatchStatus> getPagedStatusesForBatchAsync(String id);

    /**
     * Get paged statuses for batch.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResultOfBatchStatus object
     */
    Observable<ServiceResponse<PagedResultOfBatchStatus>> getPagedStatusesForBatchWithServiceResponseAsync(String id);
    /**
     * Get paged statuses for batch.
     *
     * @param id the String value
     * @param page the Integer value
     * @param pageSize the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResultOfBatchStatus object if successful.
     */
    PagedResultOfBatchStatus getPagedStatusesForBatch(String id, Integer page, Integer pageSize);

    /**
     * Get paged statuses for batch.
     *
     * @param id the String value
     * @param page the Integer value
     * @param pageSize the Integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResultOfBatchStatus> getPagedStatusesForBatchAsync(String id, Integer page, Integer pageSize, final ServiceCallback<PagedResultOfBatchStatus> serviceCallback);

    /**
     * Get paged statuses for batch.
     *
     * @param id the String value
     * @param page the Integer value
     * @param pageSize the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResultOfBatchStatus object
     */
    Observable<PagedResultOfBatchStatus> getPagedStatusesForBatchAsync(String id, Integer page, Integer pageSize);

    /**
     * Get paged statuses for batch.
     *
     * @param id the String value
     * @param page the Integer value
     * @param pageSize the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResultOfBatchStatus object
     */
    Observable<ServiceResponse<PagedResultOfBatchStatus>> getPagedStatusesForBatchWithServiceResponseAsync(String id, Integer page, Integer pageSize);

    /**
     * Events placeholder for batch.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataflowEvent object if successful.
     */
    DataflowEvent eventsPlaceholderForBatch();

    /**
     * Events placeholder for batch.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DataflowEvent> eventsPlaceholderForBatchAsync(final ServiceCallback<DataflowEvent> serviceCallback);

    /**
     * Events placeholder for batch.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataflowEvent object
     */
    Observable<DataflowEvent> eventsPlaceholderForBatchAsync();

    /**
     * Events placeholder for batch.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataflowEvent object
     */
    Observable<ServiceResponse<DataflowEvent>> eventsPlaceholderForBatchWithServiceResponseAsync();

    /**
     * Get all batches.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Batch&gt; object if successful.
     */
    List<Batch> getAllBatches();

    /**
     * Get all batches.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Batch>> getAllBatchesAsync(final ServiceCallback<List<Batch>> serviceCallback);

    /**
     * Get all batches.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Batch&gt; object
     */
    Observable<List<Batch>> getAllBatchesAsync();

    /**
     * Get all batches.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Batch&gt; object
     */
    Observable<ServiceResponse<List<Batch>>> getAllBatchesWithServiceResponseAsync();
    /**
     * Get all batches.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param jobId the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Batch&gt; object if successful.
     */
    List<Batch> getAllBatches(String id, String name, String description, String jobId, String createdBy, String updatedBy, String deletedBy);

    /**
     * Get all batches.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param jobId the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Batch>> getAllBatchesAsync(String id, String name, String description, String jobId, String createdBy, String updatedBy, String deletedBy, final ServiceCallback<List<Batch>> serviceCallback);

    /**
     * Get all batches.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param jobId the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Batch&gt; object
     */
    Observable<List<Batch>> getAllBatchesAsync(String id, String name, String description, String jobId, String createdBy, String updatedBy, String deletedBy);

    /**
     * Get all batches.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param jobId the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Batch&gt; object
     */
    Observable<ServiceResponse<List<Batch>>> getAllBatchesWithServiceResponseAsync(String id, String name, String description, String jobId, String createdBy, String updatedBy, String deletedBy);

    /**
     * Create batch.
     *
     * @param input the Batch value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createBatch(Batch input);

    /**
     * Create batch.
     *
     * @param input the Batch value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createBatchAsync(Batch input, final ServiceCallback<Object> serviceCallback);

    /**
     * Create batch.
     *
     * @param input the Batch value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createBatchAsync(Batch input);

    /**
     * Create batch.
     *
     * @param input the Batch value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createBatchWithServiceResponseAsync(Batch input);

    /**
     * Get one batch.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Batch object if successful.
     */
    Batch getOneBatch(String id);

    /**
     * Get one batch.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Batch> getOneBatchAsync(String id, final ServiceCallback<Batch> serviceCallback);

    /**
     * Get one batch.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Batch object
     */
    Observable<Batch> getOneBatchAsync(String id);

    /**
     * Get one batch.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Batch object
     */
    Observable<ServiceResponse<Batch>> getOneBatchWithServiceResponseAsync(String id);
    /**
     * Get one batch.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Batch object if successful.
     */
    Batch getOneBatch(String id, Integer version);

    /**
     * Get one batch.
     *
     * @param id the String value
     * @param version the Integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Batch> getOneBatchAsync(String id, Integer version, final ServiceCallback<Batch> serviceCallback);

    /**
     * Get one batch.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Batch object
     */
    Observable<Batch> getOneBatchAsync(String id, Integer version);

    /**
     * Get one batch.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Batch object
     */
    Observable<ServiceResponse<Batch>> getOneBatchWithServiceResponseAsync(String id, Integer version);

    /**
     * Update batch.
     *
     * @param id the String value
     * @param model the Batch value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateBatch(String id, Batch model);

    /**
     * Update batch.
     *
     * @param id the String value
     * @param model the Batch value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateBatchAsync(String id, Batch model, final ServiceCallback<Object> serviceCallback);

    /**
     * Update batch.
     *
     * @param id the String value
     * @param model the Batch value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateBatchAsync(String id, Batch model);

    /**
     * Update batch.
     *
     * @param id the String value
     * @param model the Batch value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateBatchWithServiceResponseAsync(String id, Batch model);

    /**
     * Delete batch.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteBatch(String id);

    /**
     * Delete batch.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteBatchAsync(String id, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete batch.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteBatchAsync(String id);

    /**
     * Delete batch.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteBatchWithServiceResponseAsync(String id);

    /**
     * Get batch versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Batch&gt; object if successful.
     */
    List<Batch> getBatchVersions(String id);

    /**
     * Get batch versions.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Batch>> getBatchVersionsAsync(String id, final ServiceCallback<List<Batch>> serviceCallback);

    /**
     * Get batch versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Batch&gt; object
     */
    Observable<List<Batch>> getBatchVersionsAsync(String id);

    /**
     * Get batch versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Batch&gt; object
     */
    Observable<ServiceResponse<List<Batch>>> getBatchVersionsWithServiceResponseAsync(String id);

    /**
     * Get all connections.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Connection&gt; object if successful.
     */
    List<Connection> getAllConnections();

    /**
     * Get all connections.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Connection>> getAllConnectionsAsync(final ServiceCallback<List<Connection>> serviceCallback);

    /**
     * Get all connections.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Connection&gt; object
     */
    Observable<List<Connection>> getAllConnectionsAsync();

    /**
     * Get all connections.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Connection&gt; object
     */
    Observable<ServiceResponse<List<Connection>>> getAllConnectionsWithServiceResponseAsync();
    /**
     * Get all connections.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param plugin the String value
     * @param preferredAgent the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Connection&gt; object if successful.
     */
    List<Connection> getAllConnections(String id, String name, String description, String plugin, String preferredAgent, String createdBy, String updatedBy, String deletedBy);

    /**
     * Get all connections.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param plugin the String value
     * @param preferredAgent the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Connection>> getAllConnectionsAsync(String id, String name, String description, String plugin, String preferredAgent, String createdBy, String updatedBy, String deletedBy, final ServiceCallback<List<Connection>> serviceCallback);

    /**
     * Get all connections.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param plugin the String value
     * @param preferredAgent the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Connection&gt; object
     */
    Observable<List<Connection>> getAllConnectionsAsync(String id, String name, String description, String plugin, String preferredAgent, String createdBy, String updatedBy, String deletedBy);

    /**
     * Get all connections.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param plugin the String value
     * @param preferredAgent the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Connection&gt; object
     */
    Observable<ServiceResponse<List<Connection>>> getAllConnectionsWithServiceResponseAsync(String id, String name, String description, String plugin, String preferredAgent, String createdBy, String updatedBy, String deletedBy);

    /**
     * Create connection.
     *
     * @param input the Connection value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createConnection(Connection input);

    /**
     * Create connection.
     *
     * @param input the Connection value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createConnectionAsync(Connection input, final ServiceCallback<Object> serviceCallback);

    /**
     * Create connection.
     *
     * @param input the Connection value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createConnectionAsync(Connection input);

    /**
     * Create connection.
     *
     * @param input the Connection value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createConnectionWithServiceResponseAsync(Connection input);

    /**
     * Get one connection.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Connection object if successful.
     */
    Connection getOneConnection(String id);

    /**
     * Get one connection.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Connection> getOneConnectionAsync(String id, final ServiceCallback<Connection> serviceCallback);

    /**
     * Get one connection.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Connection object
     */
    Observable<Connection> getOneConnectionAsync(String id);

    /**
     * Get one connection.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Connection object
     */
    Observable<ServiceResponse<Connection>> getOneConnectionWithServiceResponseAsync(String id);
    /**
     * Get one connection.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Connection object if successful.
     */
    Connection getOneConnection(String id, Integer version);

    /**
     * Get one connection.
     *
     * @param id the String value
     * @param version the Integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Connection> getOneConnectionAsync(String id, Integer version, final ServiceCallback<Connection> serviceCallback);

    /**
     * Get one connection.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Connection object
     */
    Observable<Connection> getOneConnectionAsync(String id, Integer version);

    /**
     * Get one connection.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Connection object
     */
    Observable<ServiceResponse<Connection>> getOneConnectionWithServiceResponseAsync(String id, Integer version);

    /**
     * Update connection.
     *
     * @param id the String value
     * @param model the Connection value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateConnection(String id, Connection model);

    /**
     * Update connection.
     *
     * @param id the String value
     * @param model the Connection value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateConnectionAsync(String id, Connection model, final ServiceCallback<Object> serviceCallback);

    /**
     * Update connection.
     *
     * @param id the String value
     * @param model the Connection value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateConnectionAsync(String id, Connection model);

    /**
     * Update connection.
     *
     * @param id the String value
     * @param model the Connection value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateConnectionWithServiceResponseAsync(String id, Connection model);

    /**
     * Delete connection.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteConnection(String id);

    /**
     * Delete connection.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteConnectionAsync(String id, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete connection.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteConnectionAsync(String id);

    /**
     * Delete connection.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteConnectionWithServiceResponseAsync(String id);

    /**
     * Get connection versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Connection&gt; object if successful.
     */
    List<Connection> getConnectionVersions(String id);

    /**
     * Get connection versions.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Connection>> getConnectionVersionsAsync(String id, final ServiceCallback<List<Connection>> serviceCallback);

    /**
     * Get connection versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Connection&gt; object
     */
    Observable<List<Connection>> getConnectionVersionsAsync(String id);

    /**
     * Get connection versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Connection&gt; object
     */
    Observable<ServiceResponse<List<Connection>>> getConnectionVersionsWithServiceResponseAsync(String id);

    /**
     * Get all flows.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Flow&gt; object if successful.
     */
    List<Flow> getAllFlows();

    /**
     * Get all flows.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Flow>> getAllFlowsAsync(final ServiceCallback<List<Flow>> serviceCallback);

    /**
     * Get all flows.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Flow&gt; object
     */
    Observable<List<Flow>> getAllFlowsAsync();

    /**
     * Get all flows.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Flow&gt; object
     */
    Observable<ServiceResponse<List<Flow>>> getAllFlowsWithServiceResponseAsync();
    /**
     * Get all flows.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Flow&gt; object if successful.
     */
    List<Flow> getAllFlows(String id, String name, String description, String createdBy, String updatedBy, String deletedBy);

    /**
     * Get all flows.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Flow>> getAllFlowsAsync(String id, String name, String description, String createdBy, String updatedBy, String deletedBy, final ServiceCallback<List<Flow>> serviceCallback);

    /**
     * Get all flows.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Flow&gt; object
     */
    Observable<List<Flow>> getAllFlowsAsync(String id, String name, String description, String createdBy, String updatedBy, String deletedBy);

    /**
     * Get all flows.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Flow&gt; object
     */
    Observable<ServiceResponse<List<Flow>>> getAllFlowsWithServiceResponseAsync(String id, String name, String description, String createdBy, String updatedBy, String deletedBy);

    /**
     * Create flow.
     *
     * @param input the Flow value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createFlow(Flow input);

    /**
     * Create flow.
     *
     * @param input the Flow value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createFlowAsync(Flow input, final ServiceCallback<Object> serviceCallback);

    /**
     * Create flow.
     *
     * @param input the Flow value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createFlowAsync(Flow input);

    /**
     * Create flow.
     *
     * @param input the Flow value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createFlowWithServiceResponseAsync(Flow input);

    /**
     * Get one flow.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Flow object if successful.
     */
    Flow getOneFlow(String id);

    /**
     * Get one flow.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Flow> getOneFlowAsync(String id, final ServiceCallback<Flow> serviceCallback);

    /**
     * Get one flow.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Flow object
     */
    Observable<Flow> getOneFlowAsync(String id);

    /**
     * Get one flow.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Flow object
     */
    Observable<ServiceResponse<Flow>> getOneFlowWithServiceResponseAsync(String id);
    /**
     * Get one flow.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Flow object if successful.
     */
    Flow getOneFlow(String id, Integer version);

    /**
     * Get one flow.
     *
     * @param id the String value
     * @param version the Integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Flow> getOneFlowAsync(String id, Integer version, final ServiceCallback<Flow> serviceCallback);

    /**
     * Get one flow.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Flow object
     */
    Observable<Flow> getOneFlowAsync(String id, Integer version);

    /**
     * Get one flow.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Flow object
     */
    Observable<ServiceResponse<Flow>> getOneFlowWithServiceResponseAsync(String id, Integer version);

    /**
     * Update flow.
     *
     * @param id the String value
     * @param model the Flow value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateFlow(String id, Flow model);

    /**
     * Update flow.
     *
     * @param id the String value
     * @param model the Flow value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateFlowAsync(String id, Flow model, final ServiceCallback<Object> serviceCallback);

    /**
     * Update flow.
     *
     * @param id the String value
     * @param model the Flow value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateFlowAsync(String id, Flow model);

    /**
     * Update flow.
     *
     * @param id the String value
     * @param model the Flow value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateFlowWithServiceResponseAsync(String id, Flow model);

    /**
     * Delete flow.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteFlow(String id);

    /**
     * Delete flow.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteFlowAsync(String id, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete flow.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteFlowAsync(String id);

    /**
     * Delete flow.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteFlowWithServiceResponseAsync(String id);

    /**
     * Get flow versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Flow&gt; object if successful.
     */
    List<Flow> getFlowVersions(String id);

    /**
     * Get flow versions.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Flow>> getFlowVersionsAsync(String id, final ServiceCallback<List<Flow>> serviceCallback);

    /**
     * Get flow versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Flow&gt; object
     */
    Observable<List<Flow>> getFlowVersionsAsync(String id);

    /**
     * Get flow versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Flow&gt; object
     */
    Observable<ServiceResponse<List<Flow>>> getFlowVersionsWithServiceResponseAsync(String id);

    /**
     * Get job mapping.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Mapping object if successful.
     */
    Mapping getJobMapping(String id);

    /**
     * Get job mapping.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Mapping> getJobMappingAsync(String id, final ServiceCallback<Mapping> serviceCallback);

    /**
     * Get job mapping.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Mapping object
     */
    Observable<Mapping> getJobMappingAsync(String id);

    /**
     * Get job mapping.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Mapping object
     */
    Observable<ServiceResponse<Mapping>> getJobMappingWithServiceResponseAsync(String id);
    /**
     * Get job mapping.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Mapping object if successful.
     */
    Mapping getJobMapping(String id, Integer version);

    /**
     * Get job mapping.
     *
     * @param id the String value
     * @param version the Integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Mapping> getJobMappingAsync(String id, Integer version, final ServiceCallback<Mapping> serviceCallback);

    /**
     * Get job mapping.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Mapping object
     */
    Observable<Mapping> getJobMappingAsync(String id, Integer version);

    /**
     * Get job mapping.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Mapping object
     */
    Observable<ServiceResponse<Mapping>> getJobMappingWithServiceResponseAsync(String id, Integer version);

    /**
     * Set job status for go between.
     *
     * @param id the String value
     * @param status the JobStatusGoBetweenScope value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Map&lt;String, List&lt;String&gt;&gt; object if successful.
     */
    Map<String, List<String>> setJobStatusForGoBetween(String id, JobStatusGoBetweenScope status);

    /**
     * Set job status for go between.
     *
     * @param id the String value
     * @param status the JobStatusGoBetweenScope value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Map<String, List<String>>> setJobStatusForGoBetweenAsync(String id, JobStatusGoBetweenScope status, final ServiceCallback<Map<String, List<String>>> serviceCallback);

    /**
     * Set job status for go between.
     *
     * @param id the String value
     * @param status the JobStatusGoBetweenScope value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Map&lt;String, List&lt;String&gt;&gt; object
     */
    Observable<Map<String, List<String>>> setJobStatusForGoBetweenAsync(String id, JobStatusGoBetweenScope status);

    /**
     * Set job status for go between.
     *
     * @param id the String value
     * @param status the JobStatusGoBetweenScope value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Map&lt;String, List&lt;String&gt;&gt; object
     */
    Observable<ServiceResponse<Map<String, List<String>>>> setJobStatusForGoBetweenWithServiceResponseAsync(String id, JobStatusGoBetweenScope status);

    /**
     * Set real time state.
     *
     * @param id the String value
     * @param state the RealTimeStateScope value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Map&lt;String, List&lt;String&gt;&gt; object if successful.
     */
    Map<String, List<String>> setRealTimeState(String id, RealTimeStateScope state);

    /**
     * Set real time state.
     *
     * @param id the String value
     * @param state the RealTimeStateScope value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Map<String, List<String>>> setRealTimeStateAsync(String id, RealTimeStateScope state, final ServiceCallback<Map<String, List<String>>> serviceCallback);

    /**
     * Set real time state.
     *
     * @param id the String value
     * @param state the RealTimeStateScope value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Map&lt;String, List&lt;String&gt;&gt; object
     */
    Observable<Map<String, List<String>>> setRealTimeStateAsync(String id, RealTimeStateScope state);

    /**
     * Set real time state.
     *
     * @param id the String value
     * @param state the RealTimeStateScope value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Map&lt;String, List&lt;String&gt;&gt; object
     */
    Observable<ServiceResponse<Map<String, List<String>>>> setRealTimeStateWithServiceResponseAsync(String id, RealTimeStateScope state);

    /**
     * Get all jobs.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Job&gt; object if successful.
     */
    List<Job> getAllJobs();

    /**
     * Get all jobs.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Job>> getAllJobsAsync(final ServiceCallback<List<Job>> serviceCallback);

    /**
     * Get all jobs.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Job&gt; object
     */
    Observable<List<Job>> getAllJobsAsync();

    /**
     * Get all jobs.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Job&gt; object
     */
    Observable<ServiceResponse<List<Job>>> getAllJobsWithServiceResponseAsync();
    /**
     * Get all jobs.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param connectionId the String value
     * @param schemaId the String value
     * @param shapeId the String value
     * @param agentId the String value
     * @param type the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Job&gt; object if successful.
     */
    List<Job> getAllJobs(String id, String name, String description, String connectionId, String schemaId, String shapeId, String agentId, String type, String createdBy, String updatedBy, String deletedBy);

    /**
     * Get all jobs.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param connectionId the String value
     * @param schemaId the String value
     * @param shapeId the String value
     * @param agentId the String value
     * @param type the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Job>> getAllJobsAsync(String id, String name, String description, String connectionId, String schemaId, String shapeId, String agentId, String type, String createdBy, String updatedBy, String deletedBy, final ServiceCallback<List<Job>> serviceCallback);

    /**
     * Get all jobs.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param connectionId the String value
     * @param schemaId the String value
     * @param shapeId the String value
     * @param agentId the String value
     * @param type the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Job&gt; object
     */
    Observable<List<Job>> getAllJobsAsync(String id, String name, String description, String connectionId, String schemaId, String shapeId, String agentId, String type, String createdBy, String updatedBy, String deletedBy);

    /**
     * Get all jobs.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param connectionId the String value
     * @param schemaId the String value
     * @param shapeId the String value
     * @param agentId the String value
     * @param type the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Job&gt; object
     */
    Observable<ServiceResponse<List<Job>>> getAllJobsWithServiceResponseAsync(String id, String name, String description, String connectionId, String schemaId, String shapeId, String agentId, String type, String createdBy, String updatedBy, String deletedBy);

    /**
     * Create job.
     *
     * @param input the Job value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createJob(Job input);

    /**
     * Create job.
     *
     * @param input the Job value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createJobAsync(Job input, final ServiceCallback<Object> serviceCallback);

    /**
     * Create job.
     *
     * @param input the Job value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createJobAsync(Job input);

    /**
     * Create job.
     *
     * @param input the Job value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createJobWithServiceResponseAsync(Job input);

    /**
     * Get paged statuses for job.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResultOfJobStatus object if successful.
     */
    PagedResultOfJobStatus getPagedStatusesForJob(String id);

    /**
     * Get paged statuses for job.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResultOfJobStatus> getPagedStatusesForJobAsync(String id, final ServiceCallback<PagedResultOfJobStatus> serviceCallback);

    /**
     * Get paged statuses for job.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResultOfJobStatus object
     */
    Observable<PagedResultOfJobStatus> getPagedStatusesForJobAsync(String id);

    /**
     * Get paged statuses for job.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResultOfJobStatus object
     */
    Observable<ServiceResponse<PagedResultOfJobStatus>> getPagedStatusesForJobWithServiceResponseAsync(String id);
    /**
     * Get paged statuses for job.
     *
     * @param id the String value
     * @param page the Integer value
     * @param pageSize the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedResultOfJobStatus object if successful.
     */
    PagedResultOfJobStatus getPagedStatusesForJob(String id, Integer page, Integer pageSize);

    /**
     * Get paged statuses for job.
     *
     * @param id the String value
     * @param page the Integer value
     * @param pageSize the Integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PagedResultOfJobStatus> getPagedStatusesForJobAsync(String id, Integer page, Integer pageSize, final ServiceCallback<PagedResultOfJobStatus> serviceCallback);

    /**
     * Get paged statuses for job.
     *
     * @param id the String value
     * @param page the Integer value
     * @param pageSize the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResultOfJobStatus object
     */
    Observable<PagedResultOfJobStatus> getPagedStatusesForJobAsync(String id, Integer page, Integer pageSize);

    /**
     * Get paged statuses for job.
     *
     * @param id the String value
     * @param page the Integer value
     * @param pageSize the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedResultOfJobStatus object
     */
    Observable<ServiceResponse<PagedResultOfJobStatus>> getPagedStatusesForJobWithServiceResponseAsync(String id, Integer page, Integer pageSize);

    /**
     * Events placeholder for job.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DataflowEvent object if successful.
     */
    DataflowEvent eventsPlaceholderForJob();

    /**
     * Events placeholder for job.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DataflowEvent> eventsPlaceholderForJobAsync(final ServiceCallback<DataflowEvent> serviceCallback);

    /**
     * Events placeholder for job.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataflowEvent object
     */
    Observable<DataflowEvent> eventsPlaceholderForJobAsync();

    /**
     * Events placeholder for job.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DataflowEvent object
     */
    Observable<ServiceResponse<DataflowEvent>> eventsPlaceholderForJobWithServiceResponseAsync();

    /**
     * Get one job.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Job object if successful.
     */
    Job getOneJob(String id);

    /**
     * Get one job.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Job> getOneJobAsync(String id, final ServiceCallback<Job> serviceCallback);

    /**
     * Get one job.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Job object
     */
    Observable<Job> getOneJobAsync(String id);

    /**
     * Get one job.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Job object
     */
    Observable<ServiceResponse<Job>> getOneJobWithServiceResponseAsync(String id);
    /**
     * Get one job.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Job object if successful.
     */
    Job getOneJob(String id, Integer version);

    /**
     * Get one job.
     *
     * @param id the String value
     * @param version the Integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Job> getOneJobAsync(String id, Integer version, final ServiceCallback<Job> serviceCallback);

    /**
     * Get one job.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Job object
     */
    Observable<Job> getOneJobAsync(String id, Integer version);

    /**
     * Get one job.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Job object
     */
    Observable<ServiceResponse<Job>> getOneJobWithServiceResponseAsync(String id, Integer version);

    /**
     * Update job.
     *
     * @param id the String value
     * @param model the Job value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateJob(String id, Job model);

    /**
     * Update job.
     *
     * @param id the String value
     * @param model the Job value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateJobAsync(String id, Job model, final ServiceCallback<Object> serviceCallback);

    /**
     * Update job.
     *
     * @param id the String value
     * @param model the Job value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateJobAsync(String id, Job model);

    /**
     * Update job.
     *
     * @param id the String value
     * @param model the Job value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateJobWithServiceResponseAsync(String id, Job model);

    /**
     * Delete job.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteJob(String id);

    /**
     * Delete job.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteJobAsync(String id, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete job.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteJobAsync(String id);

    /**
     * Delete job.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteJobWithServiceResponseAsync(String id);

    /**
     * Get job versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Job&gt; object if successful.
     */
    List<Job> getJobVersions(String id);

    /**
     * Get job versions.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Job>> getJobVersionsAsync(String id, final ServiceCallback<List<Job>> serviceCallback);

    /**
     * Get job versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Job&gt; object
     */
    Observable<List<Job>> getJobVersionsAsync(String id);

    /**
     * Get job versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Job&gt; object
     */
    Observable<ServiceResponse<List<Job>>> getJobVersionsWithServiceResponseAsync(String id);

    /**
     * Get all schema profiles.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SchemaProfile&gt; object if successful.
     */
    List<SchemaProfile> getAllSchemaProfiles();

    /**
     * Get all schema profiles.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<SchemaProfile>> getAllSchemaProfilesAsync(final ServiceCallback<List<SchemaProfile>> serviceCallback);

    /**
     * Get all schema profiles.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SchemaProfile&gt; object
     */
    Observable<List<SchemaProfile>> getAllSchemaProfilesAsync();

    /**
     * Get all schema profiles.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SchemaProfile&gt; object
     */
    Observable<ServiceResponse<List<SchemaProfile>>> getAllSchemaProfilesWithServiceResponseAsync();
    /**
     * Get all schema profiles.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param connectionId the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SchemaProfile&gt; object if successful.
     */
    List<SchemaProfile> getAllSchemaProfiles(String id, String name, String description, String connectionId, String createdBy, String updatedBy, String deletedBy);

    /**
     * Get all schema profiles.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param connectionId the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<SchemaProfile>> getAllSchemaProfilesAsync(String id, String name, String description, String connectionId, String createdBy, String updatedBy, String deletedBy, final ServiceCallback<List<SchemaProfile>> serviceCallback);

    /**
     * Get all schema profiles.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param connectionId the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SchemaProfile&gt; object
     */
    Observable<List<SchemaProfile>> getAllSchemaProfilesAsync(String id, String name, String description, String connectionId, String createdBy, String updatedBy, String deletedBy);

    /**
     * Get all schema profiles.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param connectionId the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SchemaProfile&gt; object
     */
    Observable<ServiceResponse<List<SchemaProfile>>> getAllSchemaProfilesWithServiceResponseAsync(String id, String name, String description, String connectionId, String createdBy, String updatedBy, String deletedBy);

    /**
     * Create schema profile.
     *
     * @param input the SchemaProfile value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createSchemaProfile(SchemaProfile input);

    /**
     * Create schema profile.
     *
     * @param input the SchemaProfile value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createSchemaProfileAsync(SchemaProfile input, final ServiceCallback<Object> serviceCallback);

    /**
     * Create schema profile.
     *
     * @param input the SchemaProfile value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createSchemaProfileAsync(SchemaProfile input);

    /**
     * Create schema profile.
     *
     * @param input the SchemaProfile value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createSchemaProfileWithServiceResponseAsync(SchemaProfile input);

    /**
     * Get one schema profile.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaProfile object if successful.
     */
    SchemaProfile getOneSchemaProfile(String id);

    /**
     * Get one schema profile.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SchemaProfile> getOneSchemaProfileAsync(String id, final ServiceCallback<SchemaProfile> serviceCallback);

    /**
     * Get one schema profile.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaProfile object
     */
    Observable<SchemaProfile> getOneSchemaProfileAsync(String id);

    /**
     * Get one schema profile.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaProfile object
     */
    Observable<ServiceResponse<SchemaProfile>> getOneSchemaProfileWithServiceResponseAsync(String id);
    /**
     * Get one schema profile.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaProfile object if successful.
     */
    SchemaProfile getOneSchemaProfile(String id, Integer version);

    /**
     * Get one schema profile.
     *
     * @param id the String value
     * @param version the Integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SchemaProfile> getOneSchemaProfileAsync(String id, Integer version, final ServiceCallback<SchemaProfile> serviceCallback);

    /**
     * Get one schema profile.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaProfile object
     */
    Observable<SchemaProfile> getOneSchemaProfileAsync(String id, Integer version);

    /**
     * Get one schema profile.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaProfile object
     */
    Observable<ServiceResponse<SchemaProfile>> getOneSchemaProfileWithServiceResponseAsync(String id, Integer version);

    /**
     * Update schema profile.
     *
     * @param id the String value
     * @param model the SchemaProfile value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateSchemaProfile(String id, SchemaProfile model);

    /**
     * Update schema profile.
     *
     * @param id the String value
     * @param model the SchemaProfile value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateSchemaProfileAsync(String id, SchemaProfile model, final ServiceCallback<Object> serviceCallback);

    /**
     * Update schema profile.
     *
     * @param id the String value
     * @param model the SchemaProfile value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateSchemaProfileAsync(String id, SchemaProfile model);

    /**
     * Update schema profile.
     *
     * @param id the String value
     * @param model the SchemaProfile value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateSchemaProfileWithServiceResponseAsync(String id, SchemaProfile model);

    /**
     * Delete schema profile.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteSchemaProfile(String id);

    /**
     * Delete schema profile.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteSchemaProfileAsync(String id, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete schema profile.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteSchemaProfileAsync(String id);

    /**
     * Delete schema profile.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteSchemaProfileWithServiceResponseAsync(String id);

    /**
     * Get schema profile versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SchemaProfile&gt; object if successful.
     */
    List<SchemaProfile> getSchemaProfileVersions(String id);

    /**
     * Get schema profile versions.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<SchemaProfile>> getSchemaProfileVersionsAsync(String id, final ServiceCallback<List<SchemaProfile>> serviceCallback);

    /**
     * Get schema profile versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SchemaProfile&gt; object
     */
    Observable<List<SchemaProfile>> getSchemaProfileVersionsAsync(String id);

    /**
     * Get schema profile versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SchemaProfile&gt; object
     */
    Observable<ServiceResponse<List<SchemaProfile>>> getSchemaProfileVersionsWithServiceResponseAsync(String id);

    /**
     * Get all schemas.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Schema&gt; object if successful.
     */
    List<Schema> getAllSchemas();

    /**
     * Get all schemas.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Schema>> getAllSchemasAsync(final ServiceCallback<List<Schema>> serviceCallback);

    /**
     * Get all schemas.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Schema&gt; object
     */
    Observable<List<Schema>> getAllSchemasAsync();

    /**
     * Get all schemas.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Schema&gt; object
     */
    Observable<ServiceResponse<List<Schema>>> getAllSchemasWithServiceResponseAsync();
    /**
     * Get all schemas.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param discoveredId the String value
     * @param discoveredName the String value
     * @param discoveredDescription the String value
     * @param query the String value
     * @param connectionId the String value
     * @param profilingJobId the String value
     * @param publisherMetaJson the String value
     * @param capability the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Schema&gt; object if successful.
     */
    List<Schema> getAllSchemas(String id, String name, String description, String discoveredId, String discoveredName, String discoveredDescription, String query, String connectionId, String profilingJobId, String publisherMetaJson, String capability, String createdBy, String updatedBy, String deletedBy);

    /**
     * Get all schemas.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param discoveredId the String value
     * @param discoveredName the String value
     * @param discoveredDescription the String value
     * @param query the String value
     * @param connectionId the String value
     * @param profilingJobId the String value
     * @param publisherMetaJson the String value
     * @param capability the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Schema>> getAllSchemasAsync(String id, String name, String description, String discoveredId, String discoveredName, String discoveredDescription, String query, String connectionId, String profilingJobId, String publisherMetaJson, String capability, String createdBy, String updatedBy, String deletedBy, final ServiceCallback<List<Schema>> serviceCallback);

    /**
     * Get all schemas.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param discoveredId the String value
     * @param discoveredName the String value
     * @param discoveredDescription the String value
     * @param query the String value
     * @param connectionId the String value
     * @param profilingJobId the String value
     * @param publisherMetaJson the String value
     * @param capability the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Schema&gt; object
     */
    Observable<List<Schema>> getAllSchemasAsync(String id, String name, String description, String discoveredId, String discoveredName, String discoveredDescription, String query, String connectionId, String profilingJobId, String publisherMetaJson, String capability, String createdBy, String updatedBy, String deletedBy);

    /**
     * Get all schemas.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param discoveredId the String value
     * @param discoveredName the String value
     * @param discoveredDescription the String value
     * @param query the String value
     * @param connectionId the String value
     * @param profilingJobId the String value
     * @param publisherMetaJson the String value
     * @param capability the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Schema&gt; object
     */
    Observable<ServiceResponse<List<Schema>>> getAllSchemasWithServiceResponseAsync(String id, String name, String description, String discoveredId, String discoveredName, String discoveredDescription, String query, String connectionId, String profilingJobId, String publisherMetaJson, String capability, String createdBy, String updatedBy, String deletedBy);

    /**
     * Create schema.
     *
     * @param input the Schema value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createSchema(Schema input);

    /**
     * Create schema.
     *
     * @param input the Schema value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createSchemaAsync(Schema input, final ServiceCallback<Object> serviceCallback);

    /**
     * Create schema.
     *
     * @param input the Schema value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createSchemaAsync(Schema input);

    /**
     * Create schema.
     *
     * @param input the Schema value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createSchemaWithServiceResponseAsync(Schema input);

    /**
     * Get one schema.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Schema object if successful.
     */
    Schema getOneSchema(String id);

    /**
     * Get one schema.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Schema> getOneSchemaAsync(String id, final ServiceCallback<Schema> serviceCallback);

    /**
     * Get one schema.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Schema object
     */
    Observable<Schema> getOneSchemaAsync(String id);

    /**
     * Get one schema.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Schema object
     */
    Observable<ServiceResponse<Schema>> getOneSchemaWithServiceResponseAsync(String id);
    /**
     * Get one schema.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Schema object if successful.
     */
    Schema getOneSchema(String id, Integer version);

    /**
     * Get one schema.
     *
     * @param id the String value
     * @param version the Integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Schema> getOneSchemaAsync(String id, Integer version, final ServiceCallback<Schema> serviceCallback);

    /**
     * Get one schema.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Schema object
     */
    Observable<Schema> getOneSchemaAsync(String id, Integer version);

    /**
     * Get one schema.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Schema object
     */
    Observable<ServiceResponse<Schema>> getOneSchemaWithServiceResponseAsync(String id, Integer version);

    /**
     * Update schema.
     *
     * @param id the String value
     * @param model the Schema value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateSchema(String id, Schema model);

    /**
     * Update schema.
     *
     * @param id the String value
     * @param model the Schema value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateSchemaAsync(String id, Schema model, final ServiceCallback<Object> serviceCallback);

    /**
     * Update schema.
     *
     * @param id the String value
     * @param model the Schema value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateSchemaAsync(String id, Schema model);

    /**
     * Update schema.
     *
     * @param id the String value
     * @param model the Schema value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateSchemaWithServiceResponseAsync(String id, Schema model);

    /**
     * Delete schema.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteSchema(String id);

    /**
     * Delete schema.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteSchemaAsync(String id, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete schema.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteSchemaAsync(String id);

    /**
     * Delete schema.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteSchemaWithServiceResponseAsync(String id);

    /**
     * Get schema versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Schema&gt; object if successful.
     */
    List<Schema> getSchemaVersions(String id);

    /**
     * Get schema versions.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Schema>> getSchemaVersionsAsync(String id, final ServiceCallback<List<Schema>> serviceCallback);

    /**
     * Get schema versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Schema&gt; object
     */
    Observable<List<Schema>> getSchemaVersionsAsync(String id);

    /**
     * Get schema versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Schema&gt; object
     */
    Observable<ServiceResponse<List<Schema>>> getSchemaVersionsWithServiceResponseAsync(String id);

    /**
     * Get all shapes.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Shape&gt; object if successful.
     */
    List<Shape> getAllShapes();

    /**
     * Get all shapes.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Shape>> getAllShapesAsync(final ServiceCallback<List<Shape>> serviceCallback);

    /**
     * Get all shapes.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Shape&gt; object
     */
    Observable<List<Shape>> getAllShapesAsync();

    /**
     * Get all shapes.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Shape&gt; object
     */
    Observable<ServiceResponse<List<Shape>>> getAllShapesWithServiceResponseAsync();
    /**
     * Get all shapes.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param copiedFromSchemaId the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Shape&gt; object if successful.
     */
    List<Shape> getAllShapes(String id, String name, String description, String copiedFromSchemaId, String createdBy, String updatedBy, String deletedBy);

    /**
     * Get all shapes.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param copiedFromSchemaId the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Shape>> getAllShapesAsync(String id, String name, String description, String copiedFromSchemaId, String createdBy, String updatedBy, String deletedBy, final ServiceCallback<List<Shape>> serviceCallback);

    /**
     * Get all shapes.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param copiedFromSchemaId the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Shape&gt; object
     */
    Observable<List<Shape>> getAllShapesAsync(String id, String name, String description, String copiedFromSchemaId, String createdBy, String updatedBy, String deletedBy);

    /**
     * Get all shapes.
     *
     * @param id the String value
     * @param name the String value
     * @param description the String value
     * @param copiedFromSchemaId the String value
     * @param createdBy the String value
     * @param updatedBy the String value
     * @param deletedBy the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Shape&gt; object
     */
    Observable<ServiceResponse<List<Shape>>> getAllShapesWithServiceResponseAsync(String id, String name, String description, String copiedFromSchemaId, String createdBy, String updatedBy, String deletedBy);

    /**
     * Create shape.
     *
     * @param input the Shape value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createShape(Shape input);

    /**
     * Create shape.
     *
     * @param input the Shape value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createShapeAsync(Shape input, final ServiceCallback<Object> serviceCallback);

    /**
     * Create shape.
     *
     * @param input the Shape value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createShapeAsync(Shape input);

    /**
     * Create shape.
     *
     * @param input the Shape value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createShapeWithServiceResponseAsync(Shape input);

    /**
     * Get one shape.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Shape object if successful.
     */
    Shape getOneShape(String id);

    /**
     * Get one shape.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Shape> getOneShapeAsync(String id, final ServiceCallback<Shape> serviceCallback);

    /**
     * Get one shape.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Shape object
     */
    Observable<Shape> getOneShapeAsync(String id);

    /**
     * Get one shape.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Shape object
     */
    Observable<ServiceResponse<Shape>> getOneShapeWithServiceResponseAsync(String id);
    /**
     * Get one shape.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Shape object if successful.
     */
    Shape getOneShape(String id, Integer version);

    /**
     * Get one shape.
     *
     * @param id the String value
     * @param version the Integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Shape> getOneShapeAsync(String id, Integer version, final ServiceCallback<Shape> serviceCallback);

    /**
     * Get one shape.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Shape object
     */
    Observable<Shape> getOneShapeAsync(String id, Integer version);

    /**
     * Get one shape.
     *
     * @param id the String value
     * @param version the Integer value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Shape object
     */
    Observable<ServiceResponse<Shape>> getOneShapeWithServiceResponseAsync(String id, Integer version);

    /**
     * Update shape.
     *
     * @param id the String value
     * @param model the Shape value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateShape(String id, Shape model);

    /**
     * Update shape.
     *
     * @param id the String value
     * @param model the Shape value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateShapeAsync(String id, Shape model, final ServiceCallback<Object> serviceCallback);

    /**
     * Update shape.
     *
     * @param id the String value
     * @param model the Shape value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateShapeAsync(String id, Shape model);

    /**
     * Update shape.
     *
     * @param id the String value
     * @param model the Shape value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> updateShapeWithServiceResponseAsync(String id, Shape model);

    /**
     * Delete shape.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteShape(String id);

    /**
     * Delete shape.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteShapeAsync(String id, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete shape.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteShapeAsync(String id);

    /**
     * Delete shape.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteShapeWithServiceResponseAsync(String id);

    /**
     * Get shape versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Shape&gt; object if successful.
     */
    List<Shape> getShapeVersions(String id);

    /**
     * Get shape versions.
     *
     * @param id the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<Shape>> getShapeVersionsAsync(String id, final ServiceCallback<List<Shape>> serviceCallback);

    /**
     * Get shape versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Shape&gt; object
     */
    Observable<List<Shape>> getShapeVersionsAsync(String id);

    /**
     * Get shape versions.
     *
     * @param id the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Shape&gt; object
     */
    Observable<ServiceResponse<List<Shape>>> getShapeVersionsWithServiceResponseAsync(String id);

}
